// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const INDEXES = 57366
const KEY_BLOCK_SIZE = 57367
const KEYS = 57368
const PARSER = 57369
const RTREE = 57370
const SPATIAL = 57371
const SYMBOL = 57372
const UNIQUE = 57373
const KEY = 57374
const ALL = 57375
const DISTINCT = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const SET = 57384
const LOCK = 57385
const FULL = 57386
const CHECKSUM = 57387
const VALUES = 57388
const LAST_INSERT_ID = 57389
const NEXT = 57390
const VALUE = 57391
const SHARE = 57392
const MODE = 57393
const SQL_NO_CACHE = 57394
const SQL_CACHE = 57395
const JOIN = 57396
const STRAIGHT_JOIN = 57397
const LEFT = 57398
const RIGHT = 57399
const INNER = 57400
const OUTER = 57401
const CROSS = 57402
const NATURAL = 57403
const USE = 57404
const FORCE = 57405
const ON = 57406
const ID = 57407
const HEX = 57408
const STRING = 57409
const INTEGRAL = 57410
const FLOAT = 57411
const HEXNUM = 57412
const VALUE_ARG = 57413
const LIST_ARG = 57414
const COMMENT = 57415
const COMMENT_KEYWORD = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const AND = 57422
const NOT = 57423
const BETWEEN = 57424
const CASE = 57425
const WHEN = 57426
const THEN = 57427
const ELSE = 57428
const END = 57429
const LE = 57430
const GE = 57431
const NE = 57432
const NULL_SAFE_EQUAL = 57433
const IS = 57434
const LIKE = 57435
const REGEXP = 57436
const IN = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const MODIFY = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const USING = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SHOW = 57464
const DESCRIBE = 57465
const EXPLAIN = 57466
const DATE = 57467
const ESCAPE = 57468
const REPAIR = 57469
const OPTIMIZE = 57470
const TRUNCATE = 57471
const BIT = 57472
const TINYINT = 57473
const SMALLINT = 57474
const MEDIUMINT = 57475
const INT = 57476
const INTEGER = 57477
const BIGINT = 57478
const INTNUM = 57479
const REAL = 57480
const DOUBLE = 57481
const FLOAT_TYPE = 57482
const DECIMAL = 57483
const NUMERIC = 57484
const TIME = 57485
const TIMESTAMP = 57486
const DATETIME = 57487
const YEAR = 57488
const CHAR = 57489
const VARCHAR = 57490
const BOOL = 57491
const CHARACTER = 57492
const VARBINARY = 57493
const NCHAR = 57494
const CHARSET = 57495
const TEXT = 57496
const TINYTEXT = 57497
const MEDIUMTEXT = 57498
const LONGTEXT = 57499
const BLOB = 57500
const TINYBLOB = 57501
const MEDIUMBLOB = 57502
const LONGBLOB = 57503
const JSON = 57504
const ENUM = 57505
const GEOMETRY = 57506
const POINT = 57507
const LINESTRING = 57508
const POLYGON = 57509
const GEOMETRYCOLLECTION = 57510
const MULTIPOINT = 57511
const MULTILINESTRING = 57512
const MULTIPOLYGON = 57513
const NULLX = 57514
const AUTO_INCREMENT = 57515
const APPROXNUM = 57516
const SIGNED = 57517
const UNSIGNED = 57518
const ZEROFILL = 57519
const FIXED = 57520
const DYNAMIC = 57521
const STORAGE = 57522
const DISK = 57523
const MEMORY = 57524
const COLUMN_FORMAT = 57525
const AVG_ROW_LENGTH = 57526
const COMPRESSION = 57527
const CONNECTION = 57528
const DATA = 57529
const DIRECTORY = 57530
const DELAY_KEY_WRITE = 57531
const ENCRYPTION = 57532
const INSERT_METHOD = 57533
const MAX_ROWS = 57534
const MIN_ROWS = 57535
const PACK_KEYS = 57536
const PASSWORD = 57537
const ROW_FORMAT = 57538
const STATS_AUTO_RECALC = 57539
const STATS_PERSISTENT = 57540
const STATS_SAMPLE_PAGES = 57541
const TABLESPACE = 57542
const COMPRESSED = 57543
const REDUNDANT = 57544
const COMPACT = 57545
const TOKUDB_DEFAULT = 57546
const TOKUDB_FAST = 57547
const TOKUDB_SMALL = 57548
const TOKUDB_ZLIB = 57549
const TOKUDB_QUICKLZ = 57550
const TOKUDB_LZMA = 57551
const TOKUDB_SNAPPY = 57552
const TOKUDB_UNCOMPRESSED = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const WARNINGS = 57557
const VARIABLES = 57558
const EVENTS = 57559
const BINLOG = 57560
const GTID = 57561
const STATUS = 57562
const COLUMNS = 57563
const FIELDS = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586
const PARTITION = 57587
const PARTITIONS = 57588
const LIST = 57589
const XA = 57590
const DISTRIBUTED = 57591
const ENGINES = 57592
const VERSIONS = 57593
const PROCESSLIST = 57594
const QUERYZ = 57595
const TXNZ = 57596
const KILL = 57597
const ENGINE = 57598
const SINGLE = 57599
const BEGIN = 57600
const START = 57601
const TRANSACTION = 57602
const COMMIT = 57603
const ROLLBACK = 57604
const GLOBAL = 57605
const LOCAL = 57606
const SESSION = 57607
const NAMES = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const RADON = 57618
const ATTACH = 57619
const ATTACHLIST = 57620
const DETACH = 57621
const RESHARD = 57622
const CLEANUP = 57623
const RECOVER = 57624
const REBALANCE = 57625

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4787

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 224,
	92, 847,
	-2, 663,
	-1, 230,
	92, 709,
	-2, 641,
	-1, 475,
	120, 693,
	-2, 689,
	-1, 476,
	120, 694,
	-2, 690,
	-1, 510,
	117, 82,
	167, 82,
	170, 82,
	-2, 93,
	-1, 561,
	1, 76,
	301, 76,
	-2, 82,
	-1, 684,
	5, 27,
	-2, 612,
	-1, 718,
	117, 82,
	167, 82,
	170, 82,
	-2, 94,
	-1, 776,
	32, 301,
	65, 301,
	68, 301,
	131, 301,
	-2, 844,
	-1, 829,
	1, 77,
	301, 77,
	-2, 82,
	-1, 915,
	120, 696,
	-2, 692,
	-1, 1084,
	5, 28,
	-2, 491,
	-1, 1108,
	5, 28,
	-2, 613,
	-1, 1237,
	5, 27,
	-2, 615,
	-1, 1363,
	5, 28,
	-2, 616,
}

const yyPrivate = 57344

const yyLast = 10036

var yyAct = [...]int{

	476, 453, 1261, 1366, 451, 1392, 1439, 1398, 1268, 1396,
	1269, 587, 644, 3, 687, 1296, 825, 1228, 225, 1310,
	811, 1018, 1422, 944, 968, 945, 1166, 995, 1227, 1307,
	1207, 805, 697, 56, 899, 429, 906, 909, 105, 229,
	1069, 380, 914, 1233, 360, 66, 431, 1077, 1008, 997,
	454, 50, 925, 361, 941, 688, 876, 579, 590, 972,
	908, 428, 746, 198, 105, 1033, 233, 199, 363, 830,
	228, 780, 495, 719, 478, 496, 998, 427, 418, 821,
	105, 105, 494, 484, 416, 220, 218, 208, 580, 414,
	415, 55, 961, 221, 1117, 960, 706, 707, 962, 193,
	497, 50, 498, 105, 1118, 1119, 498, 213, 705, 204,
	413, 497, 184, 716, 1320, 1367, 1465, 1438, 1421, 1400,
	181, 358, 1464, 375, 376, 357, 1412, 655, 187, 189,
	188, 190, 191, 356, 192, 1462, 1437, 399, 400, 355,
	757, 1411, 1220, 1290, 1011, 70, 402, 911, 1012, 1013,
	76, 77, 71, 394, 73, 384, 767, 854, 502, 377,
	749, 981, 386, 387, 24, 51, 26, 27, 378, 980,
	1423, 1401, 1028, 804, 1191, 388, 1336, 812, 60, 1285,
	1024, 848, 1283, 1053, 1052, 1023, 1051, 1039, 1000, 406,
	408, 105, 744, 424, 1168, 971, 46, 372, 1400, 365,
	28, 75, 1050, 36, 62, 63, 64, 65, 847, 592,
	1388, 774, 1387, 105, 1358, 1360, 105, 481, 1386, 368,
	37, 233, 367, 53, 1317, 228, 366, 233, 233, 1168,
	370, 503, 503, 102, 410, 850, 480, 974, 407, 407,
	973, 80, 79, 622, 846, 974, 753, 1275, 973, 1111,
	1401, 634, 635, 72, 1048, 50, 489, 592, 1083, 492,
	1081, 78, 1378, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 812, 954, 622, 713, 379,
	1443, 30, 31, 32, 1144, 34, 1359, 597, 643, 491,
	389, 843, 841, 837, 999, 840, 842, 35, 47, 39,
	670, 671, 48, 49, 33, 747, 1175, 591, 182, 1402,
	773, 600, 612, 969, 499, 622, 748, 750, 751, 752,
	1267, 754, 755, 756, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 1049, 845, 382, 1410, 1025, 1026, 1021,
	1022, 953, 501, 1222, 883, 599, 598, 1265, 421, 479,
	1087, 1424, 1406, 1047, 715, 591, 1176, 844, 881, 882,
	880, 598, 600, 1089, 68, 105, 599, 598, 599, 598,
	105, 105, 105, 926, 562, 105, 926, 600, 1094, 105,
	105, 1003, 390, 600, 482, 600, 506, 486, 745, 105,
	1004, 1005, 1006, 1062, 1063, 1064, 371, 1266, 1007, 449,
	450, 615, 616, 617, 618, 619, 612, 52, 364, 622,
	599, 598, 1256, 566, 567, 569, 1257, 839, 1379, 53,
	1088, 1458, 575, 38, 381, 1445, 1400, 600, 849, 879,
	40, 1450, 582, 41, 42, 1368, 44, 43, 1146, 1145,
	838, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 45, 583, 622, 869, 871, 872, 1163, 1260, 1259,
	870, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1431, 632, 581, 374, 631, 633, 1401, 599,
	598, 369, 1140, 1019, 233, 1020, 1224, 1162, 676, 105,
	1139, 900, 105, 901, 233, 690, 600, 1161, 228, 1159,
	684, 1138, 642, 1142, 1135, 645, 646, 647, 648, 649,
	650, 651, 363, 654, 656, 656, 656, 656, 656, 656,
	656, 656, 664, 665, 666, 667, 689, 1160, 1130, 1158,
	578, 694, 686, 1141, 692, 602, 1129, 1128, 685, 1037,
	1036, 1029, 404, 1339, 1258, 813, 814, 815, 672, 1247,
	1246, 807, 808, 809, 810, 588, 768, 1143, 1136, 714,
	1011, 1132, 1131, 1123, 1012, 1013, 673, 818, 819, 820,
	674, 603, 105, 1056, 1034, 1016, 577, 827, 1263, 700,
	699, 105, 105, 708, 601, 1459, 1454, 417, 770, 1451,
	1391, 105, 657, 658, 659, 660, 661, 662, 663, 1333,
	599, 598, 588, 996, 1193, 1262, 1190, 877, 1137, 653,
	1329, 1426, 1329, 1394, 417, 852, 963, 600, 1389, 417,
	1327, 857, 902, 565, 831, 859, 636, 637, 638, 639,
	640, 641, 1329, 1370, 864, 1329, 1369, 823, 824, 564,
	860, 853, 233, 1294, 417, 1326, 905, 563, 228, 711,
	1329, 417, 878, 1075, 417, 233, 1182, 1181, 917, 927,
	1178, 1179, 913, 613, 614, 615, 616, 617, 618, 619,
	612, 373, 863, 622, 1178, 1177, 1110, 417, 862, 417,
	511, 510, 1325, 915, 50, 946, 233, 690, 1174, 942,
	950, 952, 1103, 57, 862, 952, 645, 943, 948, 1106,
	1294, 233, 930, 1180, 24, 228, 1075, 918, 919, 851,
	704, 922, 903, 904, 698, 363, 702, 668, 689, 493,
	951, 53, 1372, 806, 1323, 929, 826, 931, 932, 916,
	1253, 955, 1248, 67, 947, 923, 50, 1172, 822, 817,
	940, 928, 816, 933, 1236, 1075, 866, 867, 1075, 873,
	874, 934, 610, 620, 621, 613, 614, 615, 616, 617,
	618, 619, 612, 53, 1382, 622, 965, 966, 964, 952,
	970, 24, 975, 976, 977, 978, 979, 958, 957, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 967, 588, 499, 205, 920, 921, 875, 1208,
	942, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 479, 443, 442, 444,
	445, 446, 447, 1210, 835, 834, 448, 833, 1030, 1031,
	53, 571, 680, 1351, 105, 105, 105, 74, 1352, 1212,
	1385, 1216, 1349, 1211, 1384, 1209, 956, 1350, 1348, 24,
	1214, 1002, 105, 1347, 53, 1009, 1353, 1452, 1302, 1303,
	1213, 611, 610, 620, 621, 613, 614, 615, 616, 617,
	618, 619, 612, 1215, 1217, 622, 22, 1041, 1042, 1043,
	209, 210, 877, 1035, 1436, 682, 1061, 865, 485, 683,
	1419, 1040, 831, 1058, 939, 1054, 1045, 938, 1273, 1038,
	212, 1070, 483, 1298, 1301, 1302, 1303, 1299, 53, 1300,
	1304, 1127, 233, 1383, 1429, 1032, 1079, 1057, 507, 1197,
	490, 767, 1298, 1301, 1302, 1303, 1299, 878, 1300, 1304,
	419, 1104, 101, 832, 100, 203, 105, 1065, 1428, 611,
	610, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 570, 98, 622, 1306, 420, 485, 690, 1234, 228,
	206, 207, 1170, 1015, 1082, 1014, 363, 363, 1074, 1001,
	1446, 1435, 1251, 1115, 937, 1250, 97, 1093, 1434, 1101,
	1252, 1433, 936, 200, 1091, 1112, 1342, 1072, 689, 509,
	508, 1073, 1124, 201, 915, 1165, 1125, 1126, 1105, 57,
	1341, 1293, 1084, 1085, 1086, 1133, 1134, 1090, 1113, 698,
	1059, 574, 1096, 215, 1097, 1098, 1099, 1100, 1167, 1121,
	1122, 1314, 1017, 1116, 596, 1169, 59, 61, 54, 1,
	354, 82, 1107, 1108, 1109, 1365, 829, 828, 90, 99,
	779, 778, 1432, 69, 1420, 1397, 105, 1427, 1399, 1120,
	1171, 1404, 1376, 1373, 363, 1375, 718, 717, 359, 769,
	785, 784, 783, 781, 1183, 1184, 1173, 1027, 803, 1264,
	790, 789, 712, 743, 1095, 1066, 1067, 1068, 96, 233,
	742, 741, 740, 1079, 233, 739, 228, 738, 228, 1188,
	737, 736, 1185, 1186, 1187, 588, 735, 1192, 1194, 1195,
	913, 1114, 1206, 734, 105, 733, 732, 1196, 946, 731,
	730, 233, 233, 1201, 729, 1239, 1240, 728, 727, 1205,
	1219, 915, 1237, 1218, 1204, 1221, 1202, 726, 725, 724,
	720, 723, 1235, 1226, 722, 1225, 452, 95, 83, 1319,
	94, 92, 721, 81, 788, 89, 786, 1244, 1245, 782,
	1231, 516, 514, 515, 1232, 513, 518, 947, 517, 1200,
	1238, 512, 1305, 1309, 1076, 1046, 836, 630, 935, 1010,
	226, 959, 703, 701, 103, 84, 93, 87, 88, 91,
	1241, 217, 216, 949, 669, 477, 233, 233, 233, 1340,
	1270, 1270, 1270, 1167, 1292, 1271, 1272, 1254, 1092, 1255,
	214, 652, 924, 430, 868, 441, 1242, 1243, 438, 440,
	439, 675, 681, 604, 422, 1357, 214, 214, 1230, 568,
	86, 85, 385, 487, 1297, 1295, 1229, 1102, 573, 1281,
	1289, 1377, 679, 105, 105, 787, 25, 58, 946, 214,
	1278, 1279, 1223, 1280, 211, 14, 1282, 21, 1284, 233,
	15, 1316, 13, 1270, 233, 12, 29, 1321, 1270, 10,
	1315, 9, 1322, 8, 1198, 1199, 7, 6, 5, 4,
	202, 1288, 23, 2, 20, 19, 233, 18, 1167, 1231,
	228, 17, 1324, 1308, 16, 11, 771, 947, 772, 50,
	1276, 1249, 1277, 1318, 1206, 105, 105, 105, 105, 0,
	1335, 0, 1330, 1286, 1287, 0, 105, 0, 0, 105,
	0, 0, 105, 1344, 0, 1346, 0, 0, 233, 690,
	1354, 917, 1364, 1343, 233, 1345, 0, 214, 1270, 1362,
	233, 1361, 1371, 0, 1270, 0, 0, 0, 0, 0,
	1374, 1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 214,
	689, 0, 214, 1328, 1381, 1231, 1331, 1332, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 233, 1338, 0, 1393, 1270, 0, 0,
	0, 1395, 0, 1405, 1408, 1403, 1407, 0, 0, 0,
	0, 1274, 1356, 1418, 0, 0, 0, 0, 0, 0,
	1425, 1363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 233, 233, 0,
	1440, 1440, 1440, 1441, 1442, 1430, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 1415, 1416, 1417,
	0, 0, 0, 1071, 0, 1457, 1444, 0, 0, 0,
	1390, 1460, 1461, 1448, 1449, 233, 0, 0, 0, 1463,
	0, 0, 1409, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 0, 622, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1380,
	588, 0, 179, 0, 407, 0, 0, 0, 0, 0,
	533, 561, 0, 0, 0, 0, 214, 214, 214, 0,
	0, 572, 0, 0, 0, 214, 576, 0, 0, 0,
	0, 0, 0, 0, 1453, 214, 1455, 1456, 0, 0,
	1413, 1414, 180, 0, 183, 0, 185, 186, 0, 194,
	195, 196, 197, 0, 0, 606, 0, 609, 0, 0,
	0, 0, 0, 623, 624, 625, 626, 627, 628, 629,
	0, 607, 608, 605, 611, 610, 620, 621, 613, 614,
	615, 616, 617, 618, 619, 612, 521, 383, 622, 0,
	391, 392, 393, 0, 395, 396, 397, 398, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	534, 0, 0, 0, 0, 547, 550, 551, 552, 553,
	554, 555, 0, 556, 557, 558, 559, 560, 535, 536,
	537, 538, 519, 520, 548, 214, 522, 691, 693, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 539,
	540, 541, 542, 543, 544, 545, 546, 0, 797, 796,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 611,
	610, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 0, 0, 622, 403, 0, 0, 405, 0, 0,
	0, 799, 409, 0, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 798, 791, 0, 0, 151, 0,
	107, 792, 777, 776, 0, 135, 138, 139, 214, 0,
	775, 0, 0, 774, 549, 0, 0, 858, 214, 0,
	0, 123, 0, 0, 0, 0, 0, 214, 141, 0,
	0, 159, 144, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	0, 0, 0, 0, 795, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	693, 0, 0, 912, 912, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 912, 912, 912, 0, 0, 794, 0, 0,
	0, 0, 773, 170, 802, 0, 912, 801, 0, 691,
	0, 0, 0, 117, 0, 157, 0, 168, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 130, 0,
	0, 166, 167, 118, 171, 0, 0, 110, 0, 0,
	150, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 0, 0, 160, 0, 0, 129, 124, 164, 121,
	145, 114, 108, 0, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 584, 0, 585, 0, 586,
	0, 589, 0, 0, 0, 0, 593, 594, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 111, 140, 0,
	156, 127, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 161, 0, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 214, 214, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 159,
	144, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	912, 0, 0, 0, 0, 0, 113, 0, 855, 856,
	0, 0, 214, 0, 0, 0, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 691,
	0, 693, 611, 610, 620, 621, 613, 614, 615, 616,
	617, 618, 619, 612, 0, 0, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 214, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 693, 912,
	0, 0, 0, 0, 0, 0, 163, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 214, 214, 214, 0, 0, 0, 0, 0,
	0, 0, 1355, 0, 0, 214, 0, 0, 1312, 0,
	0, 691, 337, 322, 282, 340, 258, 273, 352, 275,
	276, 312, 242, 292, 151, 271, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 338, 289,
	0, 261, 235, 268, 236, 259, 286, 123, 257, 324,
	295, 274, 0, 346, 141, 304, 0, 159, 144, 0,
	0, 288, 327, 290, 321, 281, 313, 250, 303, 341,
	272, 309, 0, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 306, 335, 270, 308, 311,
	234, 305, 0, 238, 243, 351, 333, 264, 265, 1189,
	0, 0, 0, 0, 0, 0, 287, 291, 318, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	302, 0, 0, 0, 245, 240, 285, 0, 0, 0,
	249, 0, 263, 319, 0, 0, 0, 328, 280, 170,
	334, 278, 277, 342, 315, 0, 325, 260, 269, 117,
	267, 157, 310, 168, 109, 331, 326, 300, 283, 284,
	239, 0, 317, 122, 130, 256, 307, 166, 167, 118,
	171, 244, 348, 110, 231, 347, 150, 230, 165, 332,
	301, 297, 241, 330, 299, 296, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 237, 0, 160,
	339, 353, 129, 124, 164, 121, 145, 114, 108, 247,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 329, 0,
	0, 0, 0, 0, 163, 246, 128, 253, 254, 251,
	252, 293, 294, 343, 344, 345, 320, 248, 0, 0,
	323, 298, 106, 111, 140, 350, 156, 127, 169, 0,
	0, 0, 0, 0, 266, 349, 316, 314, 336, 0,
	126, 161, 0, 162, 219, 0, 0, 224, 222, 223,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 337, 322,
	282, 340, 258, 273, 352, 275, 276, 312, 242, 292,
	151, 271, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 338, 289, 0, 261, 235, 268,
	236, 259, 286, 123, 257, 324, 295, 274, 0, 346,
	141, 304, 0, 159, 144, 0, 0, 288, 327, 290,
	321, 281, 313, 250, 303, 341, 272, 309, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 306, 335, 270, 308, 311, 234, 305, 0, 238,
	243, 351, 333, 264, 265, 0, 0, 0, 0, 0,
	0, 0, 287, 291, 318, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 302, 0, 0, 0,
	245, 240, 285, 0, 0, 0, 249, 0, 263, 319,
	0, 0, 0, 328, 280, 170, 334, 278, 277, 342,
	315, 0, 325, 260, 269, 117, 267, 157, 310, 168,
	109, 331, 326, 300, 283, 284, 239, 0, 317, 122,
	130, 256, 307, 166, 167, 118, 171, 244, 348, 110,
	231, 347, 150, 230, 165, 332, 301, 297, 241, 330,
	299, 296, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 237, 0, 160, 339, 353, 129, 124,
	164, 121, 145, 114, 108, 247, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 329, 0, 0, 0, 0, 0,
	163, 246, 128, 253, 254, 251, 252, 293, 294, 343,
	344, 345, 320, 248, 0, 0, 323, 298, 106, 111,
	140, 350, 156, 127, 169, 0, 0, 0, 0, 0,
	266, 349, 316, 314, 336, 0, 126, 161, 0, 162,
	0, 0, 0, 224, 222, 223, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 337, 322, 282, 340, 258, 273,
	352, 275, 276, 312, 242, 292, 151, 271, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	338, 289, 0, 261, 235, 268, 236, 259, 286, 123,
	257, 324, 295, 274, 0, 346, 141, 304, 0, 159,
	144, 0, 0, 288, 327, 290, 321, 281, 313, 250,
	303, 341, 272, 309, 0, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 306, 335, 270,
	308, 311, 234, 305, 0, 238, 243, 351, 333, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 287, 291,
	318, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 302, 0, 0, 0, 245, 240, 285, 0,
	0, 0, 249, 0, 263, 319, 0, 0, 0, 328,
	280, 170, 334, 278, 277, 342, 315, 0, 325, 260,
	269, 117, 267, 157, 310, 168, 109, 331, 326, 300,
	283, 284, 239, 0, 317, 122, 130, 256, 307, 166,
	167, 118, 171, 244, 348, 110, 231, 347, 150, 230,
	165, 332, 301, 297, 241, 330, 299, 296, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 237,
	0, 160, 339, 353, 129, 124, 164, 121, 145, 114,
	108, 247, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	329, 0, 0, 0, 0, 0, 163, 246, 128, 253,
	254, 251, 252, 293, 294, 343, 344, 345, 320, 248,
	0, 0, 323, 298, 106, 111, 140, 350, 156, 127,
	169, 0, 0, 0, 0, 0, 266, 349, 316, 314,
	336, 0, 126, 161, 0, 162, 500, 0, 0, 134,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	337, 322, 282, 340, 258, 273, 352, 275, 276, 312,
	242, 292, 151, 271, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 338, 289, 0, 261,
	235, 268, 236, 259, 286, 123, 257, 324, 295, 274,
	0, 346, 141, 304, 0, 159, 144, 0, 0, 288,
	327, 290, 321, 281, 313, 250, 303, 341, 272, 309,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 306, 335, 270, 308, 311, 234, 305,
	0, 238, 243, 351, 333, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 287, 291, 318, 279, 0, 0,
	0, 0, 0, 0, 1334, 0, 262, 0, 302, 0,
	0, 0, 245, 240, 285, 0, 0, 0, 249, 0,
	263, 319, 0, 0, 0, 328, 280, 170, 334, 278,
	277, 342, 315, 0, 325, 260, 269, 117, 267, 157,
	310, 168, 109, 331, 326, 300, 283, 284, 239, 0,
	317, 122, 130, 256, 307, 166, 167, 118, 171, 244,
	348, 110, 695, 347, 150, 696, 165, 332, 301, 297,
	241, 330, 299, 296, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 237, 0, 160, 339, 353,
	129, 124, 164, 121, 145, 114, 108, 247, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 329, 0, 0, 0,
	0, 0, 163, 246, 128, 253, 254, 251, 252, 293,
	294, 343, 344, 345, 320, 248, 0, 0, 323, 298,
	106, 111, 140, 350, 156, 127, 169, 0, 0, 0,
	0, 0, 266, 349, 316, 314, 336, 0, 126, 161,
	0, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 337, 322, 282, 340,
	258, 273, 352, 275, 276, 312, 242, 292, 151, 271,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 338, 289, 0, 261, 235, 268, 236, 259,
	286, 123, 257, 324, 295, 274, 0, 346, 141, 304,
	0, 159, 144, 0, 0, 288, 327, 290, 321, 281,
	313, 250, 303, 341, 272, 309, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 306,
	335, 270, 308, 311, 234, 305, 0, 238, 243, 351,
	333, 264, 265, 0, 0, 0, 0, 0, 0, 0,
	287, 291, 318, 279, 0, 0, 0, 0, 0, 0,
	1203, 0, 262, 0, 302, 0, 0, 0, 245, 240,
	285, 0, 0, 0, 249, 0, 263, 319, 0, 0,
	0, 328, 280, 170, 334, 278, 277, 342, 315, 0,
	325, 260, 269, 117, 267, 157, 310, 168, 109, 331,
	326, 300, 283, 284, 239, 0, 317, 122, 130, 256,
	307, 166, 167, 118, 171, 244, 348, 110, 695, 347,
	150, 696, 165, 332, 301, 297, 241, 330, 299, 296,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 237, 0, 160, 339, 353, 129, 124, 164, 121,
	145, 114, 108, 247, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 329, 0, 0, 0, 0, 0, 163, 246,
	128, 253, 254, 251, 252, 293, 294, 343, 344, 345,
	320, 248, 0, 0, 323, 298, 106, 111, 140, 350,
	156, 127, 169, 0, 0, 0, 0, 0, 266, 349,
	316, 314, 336, 0, 126, 161, 0, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 337, 322, 282, 340, 258, 273, 352, 275,
	276, 312, 242, 292, 151, 271, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 338, 289,
	0, 261, 235, 268, 236, 259, 286, 123, 257, 324,
	295, 274, 0, 346, 141, 304, 0, 159, 144, 0,
	0, 288, 327, 290, 321, 281, 313, 250, 303, 341,
	272, 309, 0, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 306, 335, 270, 308, 311,
	234, 305, 0, 238, 243, 351, 333, 264, 265, 0,
	0, 0, 0, 0, 0, 0, 287, 291, 318, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	302, 0, 0, 0, 245, 240, 285, 0, 0, 0,
	249, 0, 263, 319, 0, 0, 0, 328, 280, 170,
	334, 278, 277, 342, 315, 0, 325, 260, 269, 117,
	267, 157, 310, 168, 109, 331, 326, 300, 283, 284,
	239, 0, 317, 122, 130, 256, 307, 166, 167, 118,
	171, 244, 348, 110, 231, 347, 150, 230, 165, 332,
	301, 297, 241, 330, 299, 296, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 237, 0, 160,
	339, 353, 129, 124, 164, 121, 145, 114, 108, 247,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 329, 0,
	0, 0, 0, 0, 163, 246, 128, 253, 254, 251,
	252, 293, 294, 343, 344, 345, 320, 248, 0, 0,
	323, 298, 106, 111, 140, 350, 156, 127, 169, 0,
	0, 0, 0, 0, 266, 349, 316, 314, 336, 0,
	126, 161, 0, 162, 0, 0, 0, 134, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 337, 322,
	282, 340, 258, 273, 352, 275, 276, 312, 242, 292,
	151, 271, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 338, 289, 0, 261, 235, 268,
	236, 259, 286, 123, 257, 324, 295, 274, 0, 346,
	141, 304, 0, 159, 144, 0, 0, 288, 327, 290,
	321, 281, 313, 250, 303, 341, 272, 309, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 306, 335, 270, 308, 311, 234, 305, 0, 238,
	243, 351, 333, 264, 265, 0, 0, 0, 0, 0,
	0, 0, 287, 291, 318, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 302, 0, 0, 0,
	245, 240, 285, 0, 0, 0, 249, 0, 263, 319,
	0, 0, 0, 328, 280, 170, 334, 278, 277, 342,
	315, 0, 325, 260, 269, 117, 267, 157, 310, 168,
	109, 331, 326, 300, 283, 284, 239, 0, 317, 122,
	130, 256, 307, 166, 167, 118, 171, 244, 348, 110,
	695, 347, 150, 696, 165, 332, 301, 297, 241, 330,
	299, 296, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 237, 0, 160, 339, 353, 129, 124,
	164, 121, 145, 114, 108, 247, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 329, 0, 0, 0, 0, 0,
	163, 246, 128, 253, 254, 251, 252, 293, 294, 343,
	344, 345, 320, 248, 0, 0, 323, 298, 106, 111,
	140, 350, 156, 127, 169, 0, 0, 0, 0, 0,
	266, 349, 316, 314, 336, 0, 126, 161, 0, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 337, 322, 282, 340, 258, 273,
	352, 275, 276, 312, 242, 292, 151, 271, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	338, 289, 0, 261, 235, 268, 236, 259, 286, 123,
	257, 324, 295, 274, 0, 346, 141, 304, 0, 159,
	144, 0, 0, 288, 327, 290, 321, 281, 313, 250,
	303, 341, 272, 309, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 306, 335, 270,
	308, 311, 234, 305, 0, 238, 243, 351, 333, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 287, 291,
	318, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 302, 0, 0, 0, 245, 240, 285, 0,
	0, 0, 249, 0, 263, 319, 0, 0, 0, 328,
	280, 170, 334, 278, 277, 342, 315, 0, 325, 260,
	269, 117, 267, 157, 310, 168, 109, 331, 326, 300,
	283, 284, 239, 0, 317, 122, 130, 256, 307, 166,
	167, 118, 171, 244, 348, 110, 695, 347, 150, 696,
	165, 332, 301, 297, 241, 330, 299, 296, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 237,
	0, 160, 339, 353, 129, 124, 164, 121, 145, 114,
	108, 247, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	329, 0, 0, 0, 0, 0, 163, 246, 128, 253,
	254, 251, 252, 293, 294, 343, 344, 345, 320, 248,
	0, 0, 323, 298, 106, 111, 140, 350, 156, 127,
	169, 0, 0, 0, 0, 0, 266, 349, 316, 314,
	336, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	337, 322, 282, 340, 258, 273, 352, 275, 276, 312,
	242, 292, 151, 271, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 338, 289, 0, 261,
	235, 268, 236, 259, 286, 123, 257, 324, 295, 274,
	0, 346, 141, 304, 0, 159, 144, 0, 0, 288,
	327, 290, 321, 281, 313, 250, 303, 341, 272, 309,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 306, 335, 270, 308, 311, 234, 305,
	0, 238, 243, 351, 333, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 287, 291, 318, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 302, 0,
	0, 0, 245, 240, 285, 0, 0, 0, 249, 0,
	263, 319, 0, 0, 0, 328, 280, 170, 334, 278,
	277, 342, 315, 0, 325, 260, 269, 117, 267, 157,
	310, 168, 109, 331, 326, 300, 283, 284, 239, 0,
	317, 122, 130, 256, 307, 166, 167, 118, 171, 244,
	348, 110, 695, 347, 150, 696, 165, 332, 301, 297,
	241, 330, 299, 296, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 237, 0, 160, 339, 353,
	129, 124, 164, 121, 145, 114, 108, 247, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 329, 0, 0, 0,
	0, 0, 163, 246, 128, 253, 254, 251, 252, 293,
	294, 343, 344, 345, 320, 248, 0, 0, 323, 298,
	106, 111, 140, 350, 156, 127, 169, 0, 0, 0,
	0, 0, 266, 349, 316, 314, 336, 0, 126, 161,
	0, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	0, 0, 0, 907, 0, 426, 0, 0, 0, 123,
	425, 0, 0, 0, 0, 462, 141, 0, 0, 159,
	144, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 475, 443, 442,
	444, 445, 446, 447, 0, 0, 113, 448, 449, 450,
	0, 0, 0, 423, 436, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 434, 910, 0,
	0, 0, 473, 0, 435, 0, 0, 432, 437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 471, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 128, 463,
	472, 469, 470, 467, 468, 466, 465, 464, 474, 457,
	458, 460, 0, 459, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 151, 0, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	426, 0, 0, 0, 123, 425, 0, 0, 0, 0,
	462, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 709, 53,
	0, 0, 475, 443, 442, 444, 445, 446, 447, 0,
	0, 113, 448, 449, 450, 710, 0, 0, 423, 436,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 434, 0, 0, 0, 0, 473, 0, 435,
	0, 0, 432, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 471,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 128, 463, 472, 469, 470, 467, 468,
	466, 465, 464, 474, 457, 458, 460, 0, 459, 106,
	111, 140, 0, 156, 127, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 161, 0,
	162, 0, 0, 0, 134, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 426, 0, 0, 0, 123,
	425, 0, 0, 0, 0, 462, 141, 0, 0, 159,
	144, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 475, 443, 442,
	444, 445, 446, 447, 0, 0, 113, 448, 449, 450,
	0, 0, 0, 423, 436, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 434, 910, 0,
	0, 0, 473, 0, 435, 0, 0, 432, 437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 471, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 128, 463,
	472, 469, 470, 467, 468, 466, 465, 464, 474, 457,
	458, 460, 0, 459, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 151, 0, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	426, 0, 0, 0, 123, 425, 0, 0, 0, 0,
	462, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 417, 475, 443, 442, 444, 445, 446, 447, 0,
	0, 113, 448, 449, 450, 0, 0, 0, 423, 436,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 434, 0, 0, 0, 0, 473, 0, 435,
	0, 0, 432, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 471,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 128, 463, 472, 469, 470, 467, 468,
	466, 465, 464, 474, 457, 458, 460, 0, 459, 106,
	111, 140, 0, 156, 127, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 24, 0, 126, 161, 0,
	162, 0, 0, 0, 134, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 426, 0, 0, 0, 123,
	425, 0, 0, 0, 0, 462, 141, 0, 0, 159,
	144, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 475, 443, 442,
	444, 445, 446, 447, 0, 0, 113, 448, 449, 450,
	0, 0, 0, 423, 436, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 434, 0, 0,
	0, 0, 473, 0, 435, 0, 0, 432, 437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 471, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 128, 463,
	472, 469, 470, 467, 468, 466, 465, 464, 474, 457,
	458, 460, 0, 459, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 151, 0, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	426, 0, 0, 0, 123, 425, 0, 0, 0, 0,
	462, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 475, 443, 442, 444, 445, 446, 447, 0,
	0, 113, 448, 449, 450, 0, 0, 0, 423, 436,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 434, 0, 0, 0, 0, 473, 0, 435,
	0, 0, 432, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 471,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 128, 463, 472, 469, 470, 467, 468,
	466, 465, 464, 474, 457, 458, 460, 0, 459, 106,
	111, 140, 0, 156, 127, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 161, 0,
	162, 0, 0, 151, 134, 107, 0, 0, 131, 0,
	135, 138, 139, 0, 0, 0, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 0, 123, 0, 0, 0,
	0, 0, 462, 141, 0, 0, 159, 144, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 475, 443, 442, 444, 445, 446,
	447, 0, 0, 113, 448, 449, 450, 0, 0, 0,
	0, 436, 0, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 434, 0, 0, 0, 0, 473,
	0, 435, 0, 0, 432, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 471, 0, 0, 0, 0, 0, 0, 117, 0,
	157, 0, 168, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 130, 0, 0, 166, 167, 118, 171,
	0, 0, 110, 0, 0, 150, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 137, 125, 132, 154, 142,
	155, 133, 148, 147, 149, 0, 0, 0, 160, 0,
	0, 129, 124, 164, 121, 145, 114, 108, 0, 115,
	116, 120, 119, 0, 136, 143, 146, 152, 153, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 128, 463, 472, 469, 470,
	467, 468, 466, 465, 464, 474, 457, 458, 460, 0,
	459, 106, 111, 140, 0, 156, 127, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	161, 0, 162, 0, 0, 0, 134, 0, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 172,
	173, 175, 174, 176, 112, 177, 178, 1078, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 159, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 0, 1080, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 599, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 24,
	136, 143, 146, 152, 153, 158, 0, 0, 0, 0,
	151, 0, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 128, 0, 123, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 159, 144, 0, 0, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 53, 0,
	0, 104, 0, 0, 0, 126, 161, 0, 162, 0,
	113, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 157, 0, 168,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	130, 0, 0, 166, 167, 118, 171, 0, 0, 110,
	0, 0, 150, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 0, 0, 160, 0, 0, 129, 124,
	164, 121, 145, 114, 108, 0, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 151, 0,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	163, 123, 128, 0, 0, 0, 0, 0, 141, 0,
	0, 159, 144, 0, 0, 0, 0, 0, 106, 111,
	140, 0, 156, 127, 169, 0, 0, 0, 0, 104,
	0, 1313, 0, 0, 0, 0, 126, 161, 113, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 157, 0, 168, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 130, 0,
	0, 166, 167, 118, 171, 0, 0, 110, 0, 0,
	150, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 0, 0, 160, 0, 0, 129, 124, 164, 121,
	145, 114, 108, 0, 115, 116, 120, 119, 24, 136,
	143, 146, 152, 153, 158, 0, 0, 0, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	128, 0, 123, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 159, 144, 0, 0, 106, 111, 140, 0,
	156, 127, 169, 0, 0, 0, 0, 53, 0, 0,
	232, 0, 0, 0, 126, 161, 0, 162, 0, 113,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 0,
	136, 143, 146, 152, 153, 158, 0, 151, 0, 107,
	0, 0, 131, 0, 135, 138, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	123, 128, 0, 0, 0, 0, 0, 141, 0, 0,
	159, 144, 0, 0, 0, 0, 0, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 232, 0,
	0, 677, 0, 0, 678, 126, 161, 113, 162, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 157, 0, 168, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 130, 0, 0,
	166, 167, 118, 171, 0, 0, 110, 0, 0, 150,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 137,
	125, 132, 154, 142, 155, 133, 148, 147, 149, 0,
	0, 0, 160, 0, 0, 129, 124, 164, 121, 145,
	114, 108, 0, 115, 116, 120, 119, 0, 136, 143,
	146, 152, 153, 158, 0, 0, 0, 151, 0, 107,
	0, 0, 131, 0, 135, 138, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 128,
	123, 505, 0, 0, 0, 0, 0, 141, 0, 0,
	159, 144, 0, 0, 0, 106, 111, 140, 0, 156,
	127, 169, 0, 0, 0, 0, 0, 0, 232, 0,
	504, 0, 0, 126, 161, 0, 162, 113, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 173, 175, 174, 176, 112, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 157, 0, 168, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 130, 0, 0,
	166, 167, 118, 171, 0, 0, 110, 0, 0, 150,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 137,
	125, 132, 154, 142, 155, 133, 148, 147, 149, 0,
	0, 0, 160, 0, 0, 129, 124, 164, 121, 145,
	114, 108, 0, 115, 116, 120, 119, 0, 136, 143,
	146, 152, 153, 158, 0, 151, 0, 107, 0, 0,
	131, 0, 135, 138, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 123, 128,
	0, 0, 0, 0, 0, 141, 0, 0, 159, 144,
	0, 0, 0, 0, 0, 106, 111, 140, 0, 156,
	127, 169, 0, 0, 0, 0, 104, 0, 1313, 0,
	0, 0, 0, 126, 161, 113, 162, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 173, 175, 174, 176, 112, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 157, 0, 168, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 130, 0, 0, 166, 167,
	118, 171, 0, 0, 110, 0, 0, 150, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 137, 125, 132,
	154, 142, 155, 133, 148, 147, 149, 0, 0, 0,
	160, 0, 0, 129, 124, 164, 121, 145, 114, 108,
	0, 115, 116, 120, 119, 0, 136, 143, 146, 152,
	153, 158, 0, 151, 0, 107, 0, 0, 131, 0,
	135, 138, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 123, 128, 0, 0,
	0, 0, 0, 141, 0, 0, 159, 144, 0, 0,
	0, 0, 0, 106, 111, 140, 0, 156, 127, 169,
	0, 53, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 126, 161, 113, 162, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 173, 175, 174, 176, 112, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	157, 0, 168, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 130, 0, 0, 166, 167, 118, 171,
	0, 0, 110, 0, 0, 150, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 137, 125, 132, 154, 142,
	155, 133, 148, 147, 149, 0, 0, 0, 160, 0,
	0, 129, 124, 164, 121, 145, 114, 108, 0, 115,
	116, 120, 119, 0, 136, 143, 146, 152, 153, 158,
	0, 151, 0, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 123, 128, 0, 0, 0, 0,
	0, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	0, 106, 111, 140, 0, 156, 127, 169, 0, 0,
	0, 0, 232, 0, 1080, 0, 0, 0, 0, 126,
	161, 113, 162, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	173, 175, 174, 176, 112, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 0,
	0, 0, 151, 0, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 128, 488, 123, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 159, 144, 0, 0, 106,
	111, 140, 0, 156, 127, 169, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 126, 161, 0,
	162, 0, 113, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 157,
	0, 168, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 130, 0, 0, 166, 167, 118, 171, 0,
	0, 110, 0, 0, 150, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 0, 0, 160, 0, 0,
	129, 124, 164, 121, 145, 114, 108, 0, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	151, 0, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 123, 128, 0, 0, 0, 0, 0,
	141, 0, 0, 159, 144, 0, 0, 0, 0, 0,
	106, 111, 140, 0, 156, 127, 169, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 126, 161,
	113, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 157, 0, 168,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	130, 0, 0, 166, 167, 118, 171, 0, 0, 110,
	0, 0, 150, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 0, 0, 160, 0, 0, 129, 124,
	164, 121, 145, 114, 108, 0, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 151, 0,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 123, 128, 0, 0, 0, 0, 0, 141, 0,
	0, 159, 144, 0, 0, 0, 0, 0, 106, 111,
	140, 0, 156, 127, 169, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 126, 161, 113, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 157, 0, 168, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 130, 0,
	0, 166, 167, 118, 171, 0, 0, 110, 0, 0,
	150, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 0, 0, 160, 0, 0, 129, 124, 164, 121,
	145, 114, 108, 0, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 123,
	128, 0, 0, 0, 0, 0, 141, 0, 0, 159,
	144, 0, 0, 0, 0, 0, 106, 111, 140, 0,
	156, 127, 169, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 126, 161, 113, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 123, 128, 0,
	0, 0, 0, 0, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 0, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 126, 161, 113, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 151, 0, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 123, 128, 0, 0, 0,
	0, 0, 141, 0, 0, 159, 144, 0, 0, 0,
	0, 0, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 1164, 0, 0, 0, 0, 0, 0,
	126, 161, 113, 162, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 157,
	0, 168, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 130, 0, 0, 166, 167, 118, 171, 0,
	0, 110, 0, 0, 150, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 0, 0, 160, 0, 0,
	129, 124, 164, 121, 145, 114, 108, 0, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 111, 140, 0, 156, 127, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 161,
	0, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178,
}
var yyPact = [...]int{

	158, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 985, 1021, -1000, -1000, -1000, -1000, -1000, 668,
	123, 67, 20, 112, 111, 908, 103, 9339, -1000, -1000,
	49, -1000, -165, -1000, -1000, -166, -1000, -1000, -1000, -1000,
	765, -1000, -1000, -1000, -1000, -1000, 967, 978, 789, 927,
	828, -1000, 67, 9339, 1003, 2447, -141, 9537, 64, 95,
	91, 88, 64, -1000, 100, -1000, 62, 603, 62, 9339,
	9339, -75, 38, 324, -1000, -76, 280, -1000, -1000, -1000,
	-84, -1000, -1000, -1000, -1000, 324, 324, -1000, -1000, -1000,
	-1000, -1000, 9339, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 471, -1000, -1000, -1000, -1000, 656, 656, -1000,
	9339, -1000, -1000, -189, -1000, -1000, -1000, -1000, 547, 912,
	6424, 6424, 985, -1000, 765, -1000, -1000, -1000, 854, -1000,
	-1000, 311, 8745, 878, 169, 9339, 653, -1000, -1000, -184,
	3039, -1000, -1000, -1000, -1000, 250, 7950, 7950, -1000, -1000,
	-1000, 876, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 975, 974, 614,
	-1000, 1458, -1000, -1000, 9339, 290, 579, 571, 555, 9339,
	9339, 9339, 915, 767, 9339, -1000, -1000, 1001, 9339, 9339,
	-1000, 506, 6424, -1000, 280, 280, -1000, -1000, 9339, -1000,
	-1000, -1000, -1000, -1000, 280, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6424, -1000, -1000,
	174, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1016,
	185, 518, -1000, 6424, 1461, 656, 656, -1000, -1000, 130,
	-1000, -1000, 6686, 6686, 6686, 6686, 6686, 6686, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 656, 168, -1000, 6159, 656, 656, 656, 656, 656,
	656, 6424, 656, 656, 656, 656, 656, 656, 656, 656,
	656, 656, 656, 656, 656, -1000, -1000, 651, -1000, 263,
	967, 547, 828, 7750, 777, -1000, -1000, 843, 9339, -1000,
	9141, 4815, 998, 2743, -1000, 650, 644, -177, -191, -1000,
	-184, 5364, -1000, -1000, -1000, -1000, 161, -1000, 656, 90,
	115, 1681, 1617, -20, -1000, -1000, -1000, 658, -1000, 658,
	658, 658, 658, 10, 10, 10, 10, -1000, -1000, -1000,
	-1000, -1000, 677, 674, -1000, 658, 658, 658, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 673, 673, 673, 661,
	661, 880, 897, 763, 761, 760, -1000, 167, 643, -1000,
	-1000, 9339, -1000, 967, -79, -1000, -1000, -1000, 286, 324,
	9339, 9339, 280, -1000, -1000, -1000, -1000, 612, 286, -1000,
	9339, -1000, -1000, -1000, -1000, -1000, -1000, 837, 6424, 6424,
	376, 6424, 6424, 212, 6686, 354, 258, 6686, 6686, 6686,
	6686, 6686, 6686, 6686, 6686, 6686, 6686, 6686, 6686, 6686,
	6686, 6686, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 554, -1000, 765, 748, 748, 126, 126, 126, 126,
	126, 1989, 5099, 4519, 547, 6159, 5629, 5629, 6424, 6424,
	5629, 922, 285, 286, 8943, -1000, 547, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5629, 5629, 5629, 5629, 6424, -1000,
	-1000, -1000, 912, -1000, 922, 964, -1000, 851, 848, 5629,
	-1000, 736, 9141, 656, -1000, 7552, -1000, 703, -1000, 249,
	-1000, 156, -1000, -1000, -1000, -1000, -1000, 985, 6424, -1000,
	3927, -1000, -180, -1000, -173, -194, -1000, -1000, -1000, -1000,
	-1000, 286, -1000, 548, 9537, 656, 656, -1000, 115, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 221, 221, 78, 221, 221, 221,
	221, 221, -36, -44, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, -1000, -1000, -1000,
	535, 179, 157, -1000, -1000, -1000, -1000, 939, -1000, 1617,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 303, 320, -1000, 933, -1000, 931, 505, 1014,
	415, 144, 139, -22, -1000, -1000, 470, 10, 10, -1000,
	-1000, -1000, 873, -1000, -1000, -1000, 504, 504, -1000, -1000,
	-1000, -1000, 469, -1000, -1000, -1000, 468, -1000, -1000, 880,
	-1000, 70, -1000, 9339, 9339, 9339, -1000, 222, 241, 69,
	48, 46, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 9339, -1000, -1000, 503, -1000, -1000, -1000, -1000, 280,
	998, -1000, 6424, -1000, -1000, 835, 212, 278, -1000, -1000,
	315, -1000, -1000, 286, 286, 1556, -1000, -1000, -1000, -1000,
	354, 6686, 6686, 6686, 758, 1556, 1360, 336, 648, 126,
	292, 292, 198, 198, 198, 198, 198, 556, 556, -1000,
	-1000, -1000, 547, -1000, -1000, -1000, 547, 5629, 640, -1000,
	-1000, 6952, 140, 656, 138, -1000, -1000, 547, 587, 587,
	284, 328, 587, 5629, 288, -1000, 6424, 547, -1000, 587,
	547, 587, 587, -1000, -1000, 9339, -1000, -1000, -1000, -1000,
	682, -1000, 891, 625, 633, -1000, -1000, 5894, 547, 610,
	129, 985, 9141, 6424, 4519, 967, 286, -1000, -1000, -1000,
	-192, -186, -1000, -1000, 547, 9537, 9537, -1000, 493, -1000,
	415, 221, 221, -1000, 869, 466, 465, 457, 492, 491,
	221, 221, 433, 488, 540, 430, 419, 411, 462, 487,
	243, 458, 456, 416, 9735, 58, -1000, 535, -1000, 930,
	179, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	672, -1000, -1000, -1000, -1000, -1000, -1000, -96, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 621,
	-1000, -1000, 238, 608, -1000, 594, 637, 590, -1000, 221,
	221, 656, 656, 656, -1000, 9339, -1000, -1000, -1000, 538,
	7, 668, 536, 9537, -1000, -1000, -1000, 324, -1000, 286,
	-1000, -1000, -1000, -1000, -1000, -1000, 758, 1556, 836, -1000,
	6686, 6686, -1000, -1000, 587, 5629, -1000, -1000, 8544, -1000,
	-1000, 3631, 5629, 4223, -1000, -1000, -1000, 681, 423, 681,
	-113, 679, 252, -1000, 6424, 397, -1000, -1000, -1000, -1000,
	-1000, -1000, 998, 8346, 926, -1000, 656, -1000, -1000, 698,
	8943, 8943, 967, -1000, 286, -1000, -1000, -1000, -1000, -1000,
	-1000, 547, 547, -1000, -1000, 415, 415, -1000, -1000, -1000,
	-1000, -1000, -1000, 480, 479, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 667, -1000, 952, 665,
	58, 535, 345, -1000, -1000, -1000, -1000, -1000, 474, -1000,
	388, -1000, 387, 537, 279, 8943, 8943, 8943, -1000, -1000,
	-1000, 856, -1000, -1000, -1000, -1000, -1000, 6686, 1556, 1556,
	-1000, -1000, -1000, -1000, 127, 547, -1000, 547, 658, 658,
	-1000, 658, 661, -1000, 658, 30, 658, 27, 547, 547,
	656, -110, -1000, 286, 6424, 989, 634, 868, -1000, -1000,
	-1000, 919, 7153, 7351, 1013, -1000, 656, -1000, 765, 104,
	-1000, -1000, 656, -149, -1000, -1000, -1000, -1000, 8943, -1000,
	-1000, -1000, -1000, 8943, 659, 58, -1000, 615, -1000, 578,
	553, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584, -1000,
	658, 584, 584, 531, 1556, 3335, -1000, -1000, -1000, 108,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6686, 547,
	473, 286, 987, 971, 8346, 8346, 8346, 8346, -1000, 799,
	794, -1000, 788, 779, 802, 9339, -1000, 577, 7153, 152,
	-1000, 8148, -1000, -1000, 9141, 633, 547, 8943, -147, -1000,
	364, 569, 566, 8943, 657, -1000, -1000, -1000, -1000, 8943,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 160, -1000, -1000,
	-1000, 6424, 6424, 868, 700, 849, -1000, -1000, -1000, -1000,
	790, -1000, 786, -1000, -1000, -1000, -1000, -1000, 87, 81,
	79, -1000, 629, -1000, -1000, 552, -1000, 522, -1000, -1000,
	-1000, 546, 8943, 173, -1000, 94, 401, 547, 80, -133,
	286, 628, 6424, 6424, -1000, -1000, 656, 656, 656, -147,
	-1000, 844, 93, 93, -1000, 544, 895, -1000, -1000, -1000,
	221, 402, 958, 895, -1000, -1000, 944, 895, -1000, -1000,
	833, -121, -143, 286, 286, 8943, 8943, 8943, -1000, 178,
	-1000, 221, -1000, 355, 943, 93, -1000, -1000, 221, 221,
	360, -1000, -1000, -1000, -1000, 521, -1000, 806, -1000, 520,
	-1000, 520, 520, 656, 350, -1000, 517, 93, 537, 537,
	-1000, -1000, -123, -1000, 8943, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -137, -1000, -144, -1000,
}
var yyPgo = [...]int{

	0, 22, 26, 1291, 1288, 1286, 27, 1285, 1284, 1281,
	1277, 1275, 1274, 1273, 12, 876, 1272, 1270, 1269, 1268,
	1267, 1266, 1263, 1261, 1259, 1256, 1255, 1252, 1250, 1247,
	1245, 178, 1244, 1237, 1236, 48, 1235, 83, 1232, 87,
	1231, 1230, 1228, 40, 60, 36, 37, 147, 1227, 29,
	28, 17, 1226, 1225, 15, 1224, 43, 1223, 1222, 57,
	88, 1221, 1220, 41, 1219, 1218, 1215, 6, 32, 1214,
	61, 1213, 1212, 77, 193, 1211, 1210, 1209, 1208, 1205,
	1204, 56, 11, 23, 1, 25, 1203, 46, 35, 1202,
	52, 1201, 1198, 1194, 1189, 33, 1185, 74, 1184, 67,
	78, 1183, 54, 14, 55, 1182, 1181, 93, 86, 82,
	75, 1173, 72, 1172, 1171, 158, 1170, 1169, 1168, 837,
	1167, 396, 408, 1166, 58, 1165, 39, 0, 4, 18,
	47, 1164, 53, 1136, 42, 19, 1163, 1162, 1492, 34,
	85, 30, 1161, 1158, 1156, 1155, 1153, 1152, 1151, 31,
	1149, 1146, 1144, 1142, 1139, 1134, 1131, 1130, 1129, 1128,
	1127, 1118, 1117, 1114, 1110, 1109, 1106, 1105, 1103, 1096,
	1091, 1090, 1087, 1085, 1082, 1081, 1080, 1073, 20, 1072,
	1071, 1070, 21, 59, 24, 62, 1069, 1068, 1067, 79,
	16, 1063, 1062, 1061, 1060, 65, 44, 1059, 76, 49,
	45, 1058, 1057, 1056, 73, 10, 8, 1055, 9, 1053,
	1052, 5, 7, 1051, 1048, 1047, 1045, 1044, 1043, 1042,
	2, 1041, 1040, 71, 1037, 1036, 69, 3, 1035, 1030,
	1029, 1028, 50, 84, 1027, 127,
}
var yyR1 = [...]int{

	0, 230, 231, 231, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 228,
	228, 227, 154, 154, 22, 22, 22, 22, 22, 229,
	229, 229, 229, 229, 229, 219, 219, 220, 220, 214,
	212, 212, 209, 209, 216, 216, 207, 207, 213, 213,
	210, 210, 208, 208, 215, 215, 224, 224, 225, 225,
	226, 226, 185, 185, 184, 184, 183, 183, 186, 186,
	186, 25, 200, 202, 202, 203, 203, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 156, 158, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 171, 172, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 175, 175, 176, 176, 177, 177, 159,
	182, 182, 157, 153, 155, 201, 201, 201, 196, 132,
	132, 142, 142, 142, 142, 221, 221, 222, 222, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 145,
	145, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	144, 144, 144, 144, 144, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	148, 148, 148, 195, 195, 149, 149, 189, 189, 190,
	190, 190, 187, 187, 188, 188, 191, 191, 150, 150,
	150, 150, 150, 150, 36, 35, 35, 35, 117, 117,
	117, 192, 178, 178, 178, 152, 179, 179, 180, 180,
	180, 181, 181, 181, 193, 193, 194, 194, 151, 197,
	197, 197, 197, 6, 6, 217, 217, 217, 217, 211,
	211, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 199, 199, 198, 198, 206, 206, 205, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	64, 64, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	42, 42, 62, 62, 62, 59, 59, 60, 60, 61,
	61, 58, 58, 63, 63, 63, 30, 28, 29, 29,
	29, 29, 234, 31, 32, 32, 33, 33, 33, 39,
	39, 39, 37, 37, 38, 38, 45, 45, 44, 44,
	46, 46, 46, 46, 131, 131, 131, 130, 130, 48,
	48, 49, 49, 50, 50, 51, 51, 51, 65, 52,
	52, 52, 52, 137, 137, 136, 136, 136, 135, 135,
	53, 53, 53, 53, 54, 54, 54, 54, 55, 55,
	57, 57, 56, 56, 66, 66, 66, 66, 67, 67,
	68, 68, 47, 47, 47, 47, 47, 47, 47, 120,
	120, 70, 70, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 80, 80, 80, 80, 80, 80, 71,
	71, 71, 71, 71, 71, 71, 43, 43, 81, 81,
	81, 87, 82, 82, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 78, 78, 78, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	77, 77, 77, 77, 235, 235, 79, 79, 79, 79,
	40, 40, 40, 40, 40, 139, 139, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	91, 91, 41, 41, 89, 89, 90, 92, 92, 88,
	88, 88, 73, 73, 73, 73, 73, 73, 73, 75,
	75, 75, 93, 93, 94, 94, 95, 95, 96, 96,
	97, 98, 98, 98, 99, 99, 99, 99, 100, 100,
	100, 72, 72, 72, 72, 72, 72, 101, 101, 101,
	101, 102, 102, 83, 83, 85, 85, 84, 86, 103,
	103, 104, 105, 105, 108, 108, 107, 107, 107, 107,
	107, 116, 116, 115, 115, 115, 106, 106, 109, 109,
	113, 113, 112, 114, 114, 114, 114, 111, 111, 110,
	110, 140, 140, 140, 118, 118, 121, 121, 122, 122,
	119, 119, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 124, 124, 124, 125, 125, 218, 218, 128,
	128, 129, 129, 133, 133, 134, 134, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 232, 233, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 6, 7, 3,
	3, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	0, 3, 1, 1, 1, 0, 2, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 4, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 1, 2, 3, 3, 3, 2,
	3, 1, 2, 1, 1, 1, 2, 3, 2, 2,
	0, 2, 3, 2, 2, 2, 1, 0, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -230, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 42, -25,
	123, 124, 125, 146, 127, 139, 45, 62, 265, 141,
	272, 275, 276, 279, 278, 293, 38, 140, 144, 145,
	-232, 7, 249, 65, -231, 301, -95, 14, -33, 5,
	-31, -234, -31, -31, -31, -31, -200, 65, 241, -218,
	22, 29, 130, 31, -119, 134, 130, 131, 241, 130,
	130, 235, 123, 230, 267, -61, -62, 269, 270, 237,
	130, 271, 233, 268, 232, 229, 170, 68, 44, 131,
	26, 24, 130, -133, 68, -127, 255, 19, 201, 147,
	166, 256, 298, 77, 200, 203, 204, 142, 162, 206,
	205, 198, 156, 40, 196, 180, 273, 260, 239, 195,
	157, 22, 181, 185, 280, 24, 208, 179, 25, 26,
	257, 47, 183, 209, 51, 199, 210, 187, 186, 188,
	169, 17, 211, 212, 182, 184, 259, 144, 213, 50,
	192, 274, 276, 237, 197, 171, 160, 161, 146, 261,
	132, 163, 293, 294, 296, 295, 297, 299, 300, -138,
	-138, 71, 259, -138, 277, -138, -138, 294, 296, 295,
	297, 298, 300, 265, -138, -138, -138, -138, -14, -99,
	16, 15, -17, -15, -232, 6, 33, 34, -39, 52,
	53, -32, -119, -56, -133, 10, -105, -106, -108, 277,
	-140, -107, 281, 282, 280, -129, -116, 283, -128, -126,
	170, 167, 68, -127, 83, 35, 37, 190, 86, 153,
	118, 175, 15, 87, 164, 117, 238, 202, 250, 123,
	60, 242, 243, 240, 241, 230, 158, 41, 9, 38,
	140, 34, 111, 125, 90, 91, 267, 143, 36, 141,
	80, 18, 63, 10, 44, 12, 13, 135, 134, 102,
	131, 58, 7, 151, 152, 119, 39, 99, 54, 32,
	56, 100, 16, 244, 245, 43, 178, 174, 254, 177,
	150, 173, 113, 61, 48, 84, 78, 159, 81, 64,
	145, 82, 14, 59, 270, 137, 269, 155, 101, 126,
	249, 57, 6, 253, 42, 139, 149, 55, 130, 231,
	176, 148, 172, 89, 133, 79, 271, 5, 31, 193,
	8, 62, 136, 246, 247, 248, 46, 168, 165, 268,
	258, 88, 11, 194, -229, 280, 274, 266, 262, -201,
	-196, -132, 68, -127, -122, 135, 131, 131, 131, -122,
	130, -121, 135, 68, -121, -56, -56, 234, 130, 241,
	-63, 100, 11, -138, 231, -58, 238, 239, -60, 10,
	102, -138, -138, -138, 237, -138, -138, -138, -138, -63,
	-63, -138, -56, -138, 71, -138, -84, -232, -84, -138,
	-56, -138, -138, 299, 278, 279, -233, 67, -100, 18,
	43, -47, -69, 84, -74, 41, 36, -73, -70, -88,
	-86, -87, 118, 107, 108, 115, 85, 119, -78, -76,
	-77, -79, 70, 69, 71, 72, 73, 74, 78, 79,
	80, -128, -133, -84, -232, 56, 57, 250, 251, 254,
	252, 87, 46, 240, 248, 247, 246, 244, 245, 242,
	243, 135, 241, 113, 249, 68, -127, -96, -97, -47,
	-95, -14, -31, 48, -37, 34, 76, -57, 39, -56,
	42, 120, -56, 66, -109, -112, -110, 284, 286, -107,
	277, 92, -115, -128, 70, 41, -115, 42, 15, 15,
	67, 66, -142, -145, -147, -146, -148, -143, -144, 164,
	165, 118, 168, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 42, 142, 160, 161, 162, 163, 181,
	182, 183, 184, 185, 186, 187, 188, 147, 166, 256,
	148, 149, 150, 151, 152, 153, 155, 156, 157, 158,
	159, -133, 84, 68, 68, 68, -56, -56, -64, -56,
	36, 64, -133, -42, 10, -56, -133, 70, -47, -59,
	-60, -60, -56, -59, -138, -138, -138, -82, -47, -138,
	-124, 133, 35, -138, -138, -138, 8, 102, 83, 82,
	99, 66, 17, -47, -71, 102, 84, 100, 101, 86,
	104, 103, 114, 107, 108, 109, 110, 111, 112, 113,
	105, 106, 117, 92, 93, 94, 95, 96, 97, 98,
	-120, -232, -87, -232, 121, 122, -74, -74, -74, -74,
	-74, -74, -232, 120, -14, -232, -232, -232, -232, -232,
	-232, -232, -91, -47, -232, -235, -232, -235, -235, -235,
	-235, -235, -235, -235, -232, -232, -232, -232, 66, -98,
	37, 38, -99, -233, -39, -75, -128, 71, 74, -38,
	55, -72, 42, 46, -14, -232, -56, -103, -104, -88,
	-128, -133, -134, -133, -126, 167, 170, -68, 11, -108,
	-140, -111, 66, -113, 66, 285, 287, 288, -109, 64,
	81, -47, -179, 117, -232, 264, 23, -202, -203, -204,
	-157, -153, -155, -156, -158, -159, -160, -161, -162, -163,
	-164, -165, -166, -167, -168, -169, -170, -171, -172, -173,
	-174, -175, -176, -177, 77, 273, -185, 190, 201, 45,
	202, 203, 204, 131, 206, 207, 208, 25, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 41, -196, -197,
	-198, -5, -4, 131, 32, 29, 22, 21, -221, -222,
	-223, -191, -150, -192, -193, -194, -151, -36, -152, -180,
	-181, 78, 84, 41, 190, 137, 32, 31, 77, 64,
	117, 200, 197, -187, 193, -149, 65, -149, -149, -149,
	-149, -178, 167, -178, -178, -178, 65, 65, -149, -149,
	-149, -189, 65, -189, -189, -190, 65, -190, -224, -225,
	-226, -185, 36, 64, 64, 64, -123, 126, 273, 250,
	128, 125, 129, 124, 190, 167, 77, 41, 14, 261,
	68, 66, -56, -99, 236, -138, -138, -63, -133, -56,
	-59, -138, 66, -233, -56, 50, -47, -47, -80, 78,
	84, 79, 80, -47, -47, -74, -81, -84, -87, 75,
	102, 100, 101, 86, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -74, -74, -139,
	68, 70, 68, -73, -73, -128, -45, 34, -44, -46,
	109, -47, -133, -129, -134, -126, -233, -14, -44, -44,
	-47, -47, -44, -37, -89, -90, 88, -128, -233, -44,
	-45, -44, -44, -97, -100, -118, 18, 10, 46, 46,
	-44, -102, 64, -103, -83, -85, -84, -232, -14, -101,
	-128, -68, 66, 92, 120, -95, -47, -110, -112, -114,
	289, 286, 292, 68, -132, -232, -232, -204, -184, 92,
	-184, 117, -183, 170, 167, -184, -184, -184, -184, -184,
	205, 205, -184, -184, -184, -184, -184, -184, -184, -184,
	-184, -184, -184, -184, -184, -6, 68, -199, -198, 137,
	31, 30, -223, 78, 70, 71, 72, 78, -35, -70,
	-117, 240, 244, 245, 32, 32, 70, 8, -182, 68,
	70, 195, 196, 41, 41, 198, 199, -188, 194, 71,
	-178, -178, 42, -195, 70, -195, 71, 71, -226, 117,
	-183, -56, -56, -56, -138, -124, -125, 131, 32, 92,
	133, 138, 138, 138, -56, -138, 70, -59, -68, -47,
	-138, 51, 78, 79, 80, -81, -74, -74, -74, -43,
	143, 83, -233, -233, -44, 66, -131, -130, 35, -128,
	70, 120, -232, 120, -233, -233, -233, 66, 136, 35,
	-233, -44, -92, -90, 90, -47, -233, -233, -233, -233,
	-233, -56, -48, 10, 40, -102, 66, -233, -233, -233,
	66, 120, -95, -104, -47, -129, -99, 286, 290, 291,
	-233, -132, -132, 70, -182, -184, -184, 42, 71, 71,
	71, 70, 70, -184, -184, 71, 70, 68, 71, 71,
	71, 71, 41, 70, 41, 196, 195, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 71, 41,
	71, 41, 71, 41, 68, -127, -2, -1, 136, -6,
	32, -199, 65, -35, 67, 68, 118, 67, 66, 67,
	66, 67, 66, -184, -184, -232, -232, -232, -56, -138,
	68, 167, -200, 68, -196, -63, -43, 83, -74, -74,
	-233, -46, -130, 109, -134, -45, -129, -141, 118, 164,
	142, 162, 158, 179, 169, 192, 160, 193, -139, -141,
	255, -95, 91, -47, 89, -68, -49, -50, -51, -52,
	-65, -87, -232, -56, 32, -85, 46, -14, -232, -128,
	-128, -99, -233, -233, -182, -182, 70, 70, 65, -3,
	23, 20, 28, 65, -2, -6, 67, 71, 70, 71,
	71, -220, 68, 41, -186, 68, 118, 41, -206, -205,
	-128, -206, -206, 42, -74, 120, -233, -233, -149, -149,
	-149, -190, -149, 152, -149, 152, -233, -233, -232, -41,
	253, -47, -93, 12, 66, -53, -54, -55, 54, 58,
	60, 55, 56, 57, 61, -137, 35, -49, -232, -136,
	-135, 35, -133, 70, 8, -83, -14, 120, -232, -154,
	263, -206, -206, 65, -2, 67, 67, 67, -233, 66,
	-149, -233, -233, 68, 109, -178, 68, -74, -233, 70,
	-94, 13, 15, -50, -51, -50, -51, 54, 54, 54,
	59, 54, 59, 54, -54, -133, -233, -66, 62, 134,
	63, -135, -103, -233, -128, -228, -227, 262, 71, 67,
	67, -206, 65, -209, -205, -207, -210, -40, 102, 258,
	-47, -82, 64, 64, 54, 54, 131, 131, 131, 66,
	-233, 68, -211, -211, 67, -206, -208, -216, -212, -214,
	25, 77, 136, -208, -213, -212, 258, -208, -212, -233,
	256, 61, 259, -47, -47, -232, -232, -232, -227, 46,
	-217, 25, -1, 77, 258, -211, 67, -215, 43, 19,
	-184, 70, -219, 23, 20, 27, 51, 257, 260, -67,
	-128, -67, -67, 102, -184, 70, 27, -211, -184, -184,
	71, 68, 51, -233, 66, -233, -233, -84, 71, 68,
	-220, -220, 258, -128, 259, 260,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 596, 0, 382, 382, 382, 382, 382, 0,
	687, 670, 0, 0, 0, 369, 0, 0, 894, 894,
	0, 894, 0, 894, 894, 0, 894, 894, 894, 894,
	0, 33, 34, 892, 1, 3, 604, 0, 0, 386,
	389, 384, 670, 0, 0, 0, 49, 0, 668, 0,
	0, 0, 668, 688, 0, 671, 666, 0, 666, 0,
	0, 0, 0, 373, 894, 0, 0, 894, 894, 894,
	0, 894, 894, 894, 894, 373, 373, 894, 370, 362,
	363, 364, 0, 377, 693, 694, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 324,
	325, 894, 0, 328, 894, 330, 331, 0, 0, 894,
	0, 894, 894, 0, 378, 379, 380, 381, 27, 608,
	0, 0, 596, 29, 0, 382, 387, 388, 392, 390,
	391, 383, 0, 0, 442, 0, 37, 38, 632, 0,
	0, 634, 661, 662, -2, 0, 0, 0, 691, 692,
	-2, 708, 689, 690, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 44, 50, 51, 0, 0, 0,
	165, 0, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 323, 360, 0, 0,
	344, 0, 0, 345, 365, 0, 371, 372, 0, 367,
	368, 349, 350, 351, 365, 353, 354, 355, 356, 357,
	358, 359, 894, 326, 894, 329, 894, 0, 894, 334,
	682, 336, 337, 894, 894, 894, 28, 893, 23, 0,
	0, 605, 452, 0, 457, 459, 0, 494, 495, 496,
	497, 498, 0, 0, 0, 0, 0, 0, 520, 521,
	522, 523, 582, 583, 584, 585, 586, 587, 588, 461,
	462, 579, 0, 628, 0, 0, 0, 0, 0, 0,
	0, 570, 0, 544, 544, 544, 544, 544, 544, 544,
	544, 0, 0, 0, 0, -2, -2, 597, 598, 601,
	604, 27, 389, 0, 394, 393, 385, 0, 0, 441,
	0, 0, 450, 0, 646, 657, 650, 0, 0, 635,
	0, 0, 639, 643, 644, 645, 266, 642, 0, 0,
	-2, 291, 175, 242, 172, 173, 174, 235, 190, 235,
	235, 235, 235, 262, 262, 262, 262, 218, 219, 220,
	221, 222, 0, 0, 205, 235, 235, 235, 209, 225,
	226, 227, 228, 229, 230, 231, 232, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 237, 237, 237, 239,
	239, -2, 0, 0, 0, 0, 91, 0, 317, 320,
	667, 0, 319, 604, 0, 894, 894, 374, 375, 373,
	0, 0, 365, 894, 376, 327, 332, 0, 492, 333,
	0, 683, 684, 338, 339, 340, 609, 0, 0, 0,
	0, 0, 0, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 479, 480, 481, 482, 483, 484, 485,
	458, 0, 472, 0, 0, 0, 514, 515, 516, 517,
	518, 0, 396, 0, 27, 0, 0, 0, 0, 0,
	0, 392, 0, 571, 0, 536, 0, 537, 538, 539,
	540, 541, 542, 543, 0, 396, 0, 0, 0, 600,
	602, 603, 608, 30, 392, 0, 589, 0, 0, 0,
	395, 621, 0, 0, -2, 0, 440, 450, 629, 0,
	579, 0, 443, 695, 696, 708, 709, 596, 0, 633,
	0, 648, 0, 649, 0, 0, 659, 660, 647, 636,
	637, 638, 640, 0, 0, 0, 0, 92, -2, 95,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 84, 84, 0, 84, 84, 84,
	84, 84, 0, 0, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 83, 166, 167,
	283, 302, 0, 304, 305, 300, -2, 292, 168, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 246, 0, 0, 261, 0, 275, 277, 0, 0,
	0, 0, 0, 244, 243, 189, 0, 262, 262, 212,
	213, 214, 0, 215, 216, 217, 0, 0, 206, 207,
	208, 200, 0, 201, 202, 203, 0, 204, 45, -2,
	78, 0, 669, 0, 0, 0, 894, 682, 0, 679,
	0, 677, 0, 672, 673, 674, 675, 676, 678, 680,
	681, 0, 318, 894, 0, 342, 343, 346, 366, 365,
	450, 352, 0, 627, 894, 0, 453, 454, 456, 473,
	0, 475, 477, 606, 607, 463, 464, 488, 489, 490,
	0, 0, 0, 0, 486, 468, 0, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 513,
	555, 556, 0, 511, 512, 519, 0, 0, 397, 398,
	400, 404, 0, 580, 0, -2, 491, 27, 0, 0,
	0, 0, 0, 0, 577, 574, 0, 0, 545, 0,
	0, 0, 0, 599, 24, 0, 664, 665, 590, 591,
	409, 31, 0, 621, 611, 623, 625, 0, 27, 0,
	617, 596, 0, 0, 0, 604, 451, 658, 651, 652,
	0, 0, 656, 267, 0, 0, 0, 96, 0, 85,
	0, 84, 84, 86, 0, 0, 0, 0, 0, 0,
	84, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 284, 283, 303, 0,
	302, 293, 178, 247, 248, 249, 250, 251, 252, 253,
	255, 258, 259, 260, 274, 276, 278, 0, 265, 160,
	161, 268, 269, 270, 271, 272, 273, 171, 245, 0,
	210, 211, 0, 0, 233, 0, 0, 0, 79, 84,
	84, 0, 0, 0, 309, 0, 894, 685, 686, 0,
	0, 0, 0, 0, 321, 341, 361, 373, 347, 493,
	335, 610, 474, 476, 478, 465, 486, 469, 0, 466,
	0, 0, 460, 524, 0, 0, 401, 405, 0, 407,
	408, 0, 396, 0, -2, 527, 528, 0, 0, 0,
	0, 596, 0, 575, 0, 0, 535, 546, 547, 548,
	549, 25, 450, 0, 0, 32, 0, 626, -2, 0,
	0, 0, 604, 630, 631, 580, 36, 653, 654, 655,
	52, 0, 0, 162, 163, 0, 0, 87, 121, 122,
	159, 124, 125, 0, 0, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 0, 296, 0, 0,
	295, 283, 0, 254, 236, 263, 264, 223, 0, 224,
	0, 240, 0, 0, 0, 0, 0, 0, 310, 311,
	312, 0, 314, 315, 316, 348, 467, 0, 487, 470,
	525, 399, 406, 402, 0, 0, 581, 0, 235, 235,
	560, 235, 239, 563, 235, 565, 235, 568, 0, 0,
	0, 572, 534, 578, 0, 592, 410, 411, 413, 414,
	415, 423, 0, 425, 0, 624, 0, -2, 0, 619,
	618, 35, 0, 42, 123, 164, 126, 127, 0, 294,
	297, 298, 299, 0, 0, 295, 256, 0, 234, 0,
	0, 80, 57, 58, 81, 88, 89, 90, 0, 306,
	235, 0, 0, 0, 471, 0, 526, 529, 557, 262,
	561, 562, 564, 566, 567, 569, 531, 530, 0, 0,
	0, 576, 594, 0, 0, 0, 0, 0, 430, 0,
	0, 433, 0, 0, 0, 0, 424, 0, 0, 444,
	426, 0, 428, 429, 0, 614, 27, 0, 0, 54,
	0, 0, 0, 0, 0, 257, 238, 241, 62, 0,
	308, 66, 70, 313, 403, 558, 559, 550, 533, 573,
	26, 0, 0, 412, 419, 0, 422, 431, 432, 434,
	0, 436, 0, 438, 439, 416, 417, 418, 0, 0,
	0, 427, 622, -2, 620, 0, 39, 0, 43, 289,
	289, 0, 0, 72, 307, 72, 72, 0, 0, 0,
	595, 593, 0, 0, 435, 437, 0, 0, 0, 0,
	53, 0, 279, 280, 289, 0, 46, 63, 64, 65,
	84, 0, 0, 47, 67, 68, 0, 48, 71, 532,
	0, 0, 0, 420, 421, 0, 0, 0, 40, 0,
	290, 84, 286, 0, 0, 281, 289, 73, 84, 84,
	0, 61, 59, 55, 56, 0, 551, 0, 554, 0,
	448, 0, 0, 0, 0, 287, 0, 282, 0, 0,
	60, 69, 552, 445, 0, 446, 447, 41, 285, 288,
	74, 75, 0, 449, 0, 553,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 112, 104, 3,
	65, 67, 109, 107, 66, 108, 120, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 301,
	93, 92, 94, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	86, 87, 88, 89, 90, 91, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1051
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1059
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1063
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1070
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1096
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1107
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1129
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1135
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1161
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1188
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1196
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1200
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1204
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1222
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1228
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1235
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1265
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1289
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1308
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1312
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1330
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1349
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1372
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1386
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1399
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1407
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1412
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1414
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1534
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1554
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1575
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1582
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1589
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1701
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1715
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1734
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1753
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1806
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1812
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1818
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1862
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1866
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1874
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1971
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2012
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2028
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2329
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2338
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2342
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2350
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2360
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2377
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2381
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2442
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2450
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2559
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2571
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2585
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2596
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2651
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2661
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2710
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2748
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2752
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2757
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2762
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2766
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2770
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2774
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2778
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2784
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2792
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2845
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2873
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2881
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2893
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2897
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2901
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2907
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2911
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2915
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr, Filter: yyDollar[3].showFilter}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2927
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2931
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2942
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2953
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2961
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2965
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2969
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2973
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2981
		{
			yyVAL.statement = &Show{Type: ShowCollationStr, Filter: yyDollar[3].showFilter}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2985
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr, Filter: yyDollar[3].showFilter}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2989
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2994
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3008
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3018
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3022
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3038
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.str = "full "
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3058
		{
			yyVAL.showFilter = nil
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3072
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.statement = &OtherRead{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.statement = &OtherRead{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3101
		{
			setAllowComments(yylex, true)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3110
		{
			yyVAL.bytes2 = nil
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = UnionStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.str = UnionAllStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.str = UnionDistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3133
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.str = SQLCacheStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = DistinctStr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.str = StraightJoinHint
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.selectExprs = nil
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3196
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3201
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3221
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3225
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3253
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3272
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3289
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3298
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3306
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.str = JoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.str = StraightJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3337
		{
			yyVAL.str = LeftJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.str = LeftJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.str = RightJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3349
		{
			yyVAL.str = RightJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3355
		{
			yyVAL.str = NaturalJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3359
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3369
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3383
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3388
		{
			yyVAL.indexHints = nil
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3392
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3396
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3400
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3410
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3415
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3419
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3425
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3429
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3437
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3441
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3449
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3455
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3459
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3507
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3517
		{
			yyVAL.str = IsNullStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.str = IsNotNullStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.str = IsTrueStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3529
		{
			yyVAL.str = IsNotTrueStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.str = IsFalseStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3537
		{
			yyVAL.str = IsNotFalseStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.str = EqualStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.str = LessThanStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3551
		{
			yyVAL.str = GreaterThanStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = LessEqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3559
		{
			yyVAL.str = GreaterEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.str = NotEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3572
		{
			yyVAL.expr = nil
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3596
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3606
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3624
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3628
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3688
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3692
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3696
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3704
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3718
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3722
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3726
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3744
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3748
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3752
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3762
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3766
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3770
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3774
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3778
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 532:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3782
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3786
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3790
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3794
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3869
		{
			yyVAL.str = ""
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3873
		{
			yyVAL.str = BooleanModeStr
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3877
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3881
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3885
		{
			yyVAL.str = QueryExpansionStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3891
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3956
		{
			yyVAL.expr = nil
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3965
		{
			yyVAL.str = string("")
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3969
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3975
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3979
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3985
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3990
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3994
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4000
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4004
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4008
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4014
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4018
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4022
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4026
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4030
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4034
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4038
		{
			yyVAL.expr = &NullVal{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4044
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4053
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4057
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4062
		{
			yyVAL.exprs = nil
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4066
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4071
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4075
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4080
		{
			yyVAL.orderBy = nil
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4084
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4090
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4094
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4100
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4105
		{
			yyVAL.str = AscScr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4109
		{
			yyVAL.str = AscScr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4113
		{
			yyVAL.str = DescScr
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4118
		{
			yyVAL.limit = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4122
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4126
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4130
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4135
		{
			yyVAL.str = ""
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4139
		{
			yyVAL.str = ForUpdateStr
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4143
		{
			yyVAL.str = ShareModeStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4156
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4160
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4164
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4169
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4173
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4177
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4184
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4188
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4192
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4196
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4201
		{
			yyVAL.updateExprs = nil
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4205
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4211
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4215
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4221
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4225
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4231
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4237
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4247
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4251
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4257
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4263
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4267
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4273
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4277
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4284
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4288
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4292
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4296
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4300
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4307
		{
			yyVAL.bytes = []byte("charset")
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4313
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4317
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4321
		{
			yyVAL.expr = &Default{}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4327
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4331
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4337
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4341
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4347
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4351
		{
			yyVAL.str = yyDollar[2].str
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4357
		{
			yyVAL.str = yyDollar[3].str
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4363
		{
			yyVAL.str = RepeatableRead
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4367
		{
			yyVAL.str = ReadCommitted
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4371
		{
			yyVAL.str = ReadUncommitted
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4375
		{
			yyVAL.str = Serializable
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4381
		{
			yyVAL.str = ""
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4385
		{
			yyVAL.str = yyDollar[2].str
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4391
		{
			yyVAL.str = TxReadWrite
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4395
		{
			yyVAL.str = TxReadOnly
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4401
		{
			yyVAL.str = SessionStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4405
		{
			yyVAL.str = SessionStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4409
		{
			yyVAL.str = GlobalStr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4418
		{
			yyVAL.byt = 0
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4422
		{
			yyVAL.byt = 1
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4427
		{
			yyVAL.byt = 0
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4431
		{
			yyVAL.byt = 1
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4436
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4440
		{
			yyVAL.str = IgnoreStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4446
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4450
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4454
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4458
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4462
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4466
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4470
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4474
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4478
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4482
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4487
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4491
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4495
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4501
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4505
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4510
		{
			yyVAL.str = IndexStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4514
		{
			yyVAL.str = UniqueStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4520
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4524
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4531
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4537
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4541
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4548
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4770
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4779
		{
			decNesting(yylex)
		}
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4784
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
