//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const INTERVAL = 57430
const JSON_EXTRACT_OP = 57431
const JSON_UNQUOTE_EXTRACT_OP = 57432
const CREATE = 57433
const ALTER = 57434
const DROP = 57435
const RENAME = 57436
const ANALYZE = 57437
const ADD = 57438
const MODIFY = 57439
const TABLE = 57440
const INDEX = 57441
const VIEW = 57442
const TO = 57443
const IGNORE = 57444
const IF = 57445
const UNIQUE = 57446
const USING = 57447
const PRIMARY = 57448
const COLUMN = 57449
const SHOW = 57450
const DESCRIBE = 57451
const EXPLAIN = 57452
const DATE = 57453
const ESCAPE = 57454
const REPAIR = 57455
const OPTIMIZE = 57456
const TRUNCATE = 57457
const BIT = 57458
const TINYINT = 57459
const SMALLINT = 57460
const MEDIUMINT = 57461
const INT = 57462
const INTEGER = 57463
const BIGINT = 57464
const INTNUM = 57465
const REAL = 57466
const DOUBLE = 57467
const FLOAT_TYPE = 57468
const DECIMAL = 57469
const NUMERIC = 57470
const TIME = 57471
const TIMESTAMP = 57472
const DATETIME = 57473
const YEAR = 57474
const CHAR = 57475
const VARCHAR = 57476
const BOOL = 57477
const CHARACTER = 57478
const VARBINARY = 57479
const NCHAR = 57480
const CHARSET = 57481
const TEXT = 57482
const TINYTEXT = 57483
const MEDIUMTEXT = 57484
const LONGTEXT = 57485
const BLOB = 57486
const TINYBLOB = 57487
const MEDIUMBLOB = 57488
const LONGBLOB = 57489
const JSON = 57490
const ENUM = 57491
const NULLX = 57492
const AUTO_INCREMENT = 57493
const APPROXNUM = 57494
const SIGNED = 57495
const UNSIGNED = 57496
const ZEROFILL = 57497
const DATABASES = 57498
const TABLES = 57499
const VITESS_KEYSPACES = 57500
const VITESS_SHARDS = 57501
const VSCHEMA_TABLES = 57502
const WARNINGS = 57503
const VARIABLES = 57504
const EVENTS = 57505
const BINLOG = 57506
const GTID = 57507
const STATUS = 57508
const COLUMNS = 57509
const CURRENT_TIMESTAMP = 57510
const DATABASE = 57511
const CURRENT_DATE = 57512
const CURRENT_TIME = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const UTC_DATE = 57516
const UTC_TIME = 57517
const UTC_TIMESTAMP = 57518
const REPLACE = 57519
const CONVERT = 57520
const CAST = 57521
const GROUP_CONCAT = 57522
const SEPARATOR = 57523
const MATCH = 57524
const AGAINST = 57525
const BOOLEAN = 57526
const LANGUAGE = 57527
const WITH = 57528
const QUERY = 57529
const EXPANSION = 57530
const UNUSED = 57531
const PARTITION = 57532
const PARTITIONS = 57533
const HASH = 57534
const XA = 57535
const ENGINES = 57536
const VERSIONS = 57537
const PROCESSLIST = 57538
const QUERYZ = 57539
const TXNZ = 57540
const KILL = 57541
const SESSION = 57542
const ENGINE = 57543
const BEGIN = 57544
const START = 57545
const TRANSACTION = 57546
const COMMIT = 57547
const ROLLBACK = 57548

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"SESSION",
	"ENGINE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 352,
	105, 453,
	-2, 449,
	-1, 353,
	105, 454,
	-2, 450,
	-1, 519,
	5, 25,
	-2, 406,
	-1, 652,
	105, 456,
	-2, 452,
	-1, 766,
	5, 26,
	-2, 285,
	-1, 790,
	5, 26,
	-2, 407,
	-1, 873,
	5, 25,
	-2, 409,
	-1, 975,
	5, 26,
	-2, 410,
}

const yyNprod = 615
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 5938

var yyAct = [...]int{

	353, 647, 1003, 476, 301, 928, 306, 475, 3, 522,
	914, 572, 864, 723, 683, 805, 684, 925, 843, 642,
	758, 534, 645, 750, 559, 863, 649, 635, 680, 62,
	308, 268, 713, 330, 85, 236, 612, 52, 726, 523,
	361, 545, 295, 664, 304, 249, 293, 650, 355, 51,
	331, 46, 568, 56, 248, 241, 539, 258, 328, 536,
	236, 266, 1015, 1002, 1014, 994, 1012, 1001, 993, 856,
	908, 207, 84, 236, 236, 929, 600, 58, 59, 60,
	189, 285, 61, 69, 70, 66, 65, 198, 289, 283,
	213, 204, 709, 552, 809, 698, 879, 46, 828, 560,
	903, 901, 738, 737, 644, 254, 736, 276, 235, 271,
	931, 948, 68, 735, 990, 989, 988, 184, 237, 238,
	274, 240, 73, 242, 243, 244, 245, 246, 247, 980,
	442, 441, 451, 452, 444, 445, 446, 447, 448, 449,
	450, 443, 72, 935, 453, 465, 466, 488, 893, 793,
	764, 769, 286, 886, 71, 762, 64, 281, 693, 428,
	553, 474, 287, 288, 368, 290, 430, 429, 714, 443,
	731, 227, 453, 970, 972, 453, 733, 209, 818, 431,
	547, 937, 185, 431, 212, 208, 222, 180, 220, 215,
	202, 194, 195, 179, 802, 211, 188, 193, 187, 206,
	217, 218, 186, 232, 183, 226, 182, 703, 225, 205,
	560, 216, 221, 203, 200, 181, 219, 201, 199, 196,
	190, 770, 992, 734, 214, 223, 233, 819, 699, 228,
	229, 230, 442, 441, 451, 452, 444, 445, 446, 447,
	448, 449, 450, 443, 971, 981, 453, 887, 429, 885,
	503, 504, 298, 356, 178, 547, 197, 231, 210, 192,
	224, 692, 358, 236, 431, 732, 236, 730, 858, 546,
	665, 236, 191, 751, 236, 236, 236, 619, 275, 236,
	430, 429, 269, 236, 549, 236, 236, 236, 411, 550,
	357, 617, 618, 616, 430, 429, 844, 431, 665, 771,
	776, 270, 434, 430, 429, 46, 743, 744, 745, 359,
	860, 431, 707, 940, 467, 468, 469, 470, 471, 472,
	431, 846, 291, 363, 292, 444, 445, 446, 447, 448,
	449, 450, 443, 477, 463, 453, 890, 848, 889, 852,
	486, 847, 880, 845, 546, 430, 429, 67, 850, 544,
	278, 543, 722, 462, 464, 605, 607, 608, 849, 721,
	606, 513, 431, 851, 853, 49, 236, 710, 273, 236,
	239, 636, 519, 637, 524, 615, 978, 951, 888, 473,
	741, 720, 478, 479, 480, 481, 482, 483, 484, 977,
	487, 489, 489, 489, 489, 489, 489, 489, 489, 497,
	498, 499, 500, 505, 540, 506, 262, 529, 945, 561,
	562, 563, 269, 236, 830, 520, 527, 507, 236, 509,
	827, 574, 236, 1009, 294, 49, 525, 817, 810, 811,
	812, 602, 603, 807, 609, 610, 813, 912, 294, 294,
	611, 20, 594, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 803, 570,
	571, 446, 447, 448, 449, 450, 443, 614, 799, 453,
	613, 599, 704, 513, 638, 916, 919, 920, 921, 917,
	477, 918, 922, 659, 660, 985, 656, 277, 513, 490,
	491, 492, 493, 494, 495, 496, 253, 882, 881, 756,
	294, 944, 593, 356, 272, 596, 597, 598, 824, 823,
	639, 640, 943, 652, 814, 46, 821, 820, 669, 792,
	294, 513, 653, 655, 524, 662, 654, 682, 687, 478,
	53, 641, 691, 651, 654, 294, 667, 695, 788, 433,
	555, 556, 557, 558, 690, 912, 666, 22, 673, 681,
	672, 691, 685, 372, 371, 565, 566, 567, 451, 452,
	444, 445, 446, 447, 448, 449, 450, 443, 756, 686,
	453, 46, 694, 872, 432, 785, 525, 513, 822, 689,
	711, 712, 756, 22, 657, 658, 702, 696, 661, 430,
	429, 535, 49, 554, 716, 717, 718, 501, 573, 255,
	63, 700, 668, 725, 670, 671, 431, 22, 569, 564,
	329, 320, 319, 321, 322, 323, 324, 756, 984, 679,
	325, 681, 747, 748, 749, 417, 412, 724, 49, 963,
	517, 515, 691, 518, 964, 651, 916, 919, 920, 921,
	917, 1007, 918, 922, 49, 234, 961, 614, 513, 987,
	613, 962, 49, 746, 986, 965, 765, 920, 921, 960,
	727, 959, 259, 260, 1000, 742, 601, 777, 678, 677,
	264, 891, 362, 715, 367, 236, 801, 739, 296, 706,
	942, 941, 740, 264, 264, 753, 360, 786, 477, 754,
	297, 870, 701, 575, 796, 416, 924, 362, 524, 250,
	763, 513, 954, 766, 767, 768, 760, 775, 772, 256,
	257, 787, 370, 778, 676, 779, 780, 781, 782, 53,
	797, 251, 675, 953, 911, 535, 426, 421, 794, 236,
	284, 795, 652, 789, 790, 791, 282, 265, 932, 427,
	798, 55, 57, 50, 815, 816, 1, 804, 755, 542,
	525, 537, 651, 267, 541, 719, 834, 835, 884, 806,
	513, 808, 548, 708, 551, 513, 829, 773, 697, 538,
	831, 832, 800, 939, 705, 375, 376, 374, 859, 837,
	838, 378, 377, 841, 373, 74, 236, 923, 927, 757,
	855, 842, 729, 513, 513, 728, 577, 461, 854, 873,
	674, 652, 836, 862, 688, 871, 861, 502, 354, 952,
	840, 857, 826, 910, 774, 485, 867, 663, 760, 307,
	604, 651, 685, 651, 441, 451, 452, 444, 445, 446,
	447, 448, 449, 450, 443, 318, 868, 453, 892, 686,
	877, 315, 874, 317, 316, 508, 878, 516, 435, 305,
	299, 875, 876, 969, 866, 420, 364, 915, 869, 913,
	899, 865, 909, 784, 425, 907, 979, 514, 23, 236,
	236, 54, 261, 264, 19, 14, 264, 13, 12, 513,
	27, 410, 934, 513, 264, 264, 264, 933, 894, 418,
	895, 10, 936, 264, 513, 264, 264, 264, 938, 867,
	9, 904, 905, 8, 7, 725, 685, 906, 6, 5,
	4, 949, 252, 236, 236, 236, 236, 21, 263, 926,
	842, 2, 947, 686, 236, 46, 956, 236, 958, 724,
	236, 279, 280, 966, 656, 973, 513, 651, 955, 524,
	957, 806, 974, 867, 867, 867, 867, 18, 17, 16,
	15, 11, 651, 0, 950, 982, 477, 867, 983, 0,
	0, 0, 0, 868, 868, 868, 868, 883, 0, 0,
	0, 0, 968, 0, 0, 0, 264, 926, 526, 528,
	0, 975, 0, 0, 0, 0, 995, 996, 0, 0,
	0, 525, 0, 0, 976, 0, 0, 0, 513, 513,
	513, 1005, 1006, 0, 0, 896, 897, 0, 898, 0,
	513, 900, 0, 902, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 0, 991, 0, 264, 0,
	0, 0, 264, 0, 0, 22, 0, 0, 0, 997,
	998, 999, 0, 0, 0, 0, 207, 0, 0, 0,
	1008, 0, 1010, 1011, 0, 189, 1004, 1004, 1004, 0,
	0, 0, 198, 0, 0, 213, 204, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 235, 648, 528, 0, 0, 0, 0,
	648, 648, 184, 0, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 648,
	648, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 366, 0, 0, 369, 648, 0, 0, 526, 0,
	0, 0, 413, 414, 415, 0, 0, 0, 0, 0,
	0, 419, 0, 422, 423, 424, 227, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 185, 0, 212,
	208, 222, 180, 220, 215, 202, 194, 195, 179, 0,
	211, 188, 193, 187, 206, 217, 218, 186, 232, 183,
	226, 182, 0, 225, 205, 0, 216, 221, 203, 200,
	181, 219, 201, 199, 196, 190, 0, 0, 0, 214,
	223, 233, 0, 0, 228, 229, 230, 442, 441, 451,
	452, 444, 445, 446, 447, 448, 449, 450, 443, 0,
	0, 453, 0, 0, 521, 0, 0, 0, 0, 178,
	0, 197, 231, 210, 192, 224, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 648, 0, 442, 441, 451, 452,
	444, 445, 446, 447, 448, 449, 450, 443, 0, 752,
	453, 576, 0, 648, 0, 0, 592, 0, 0, 0,
	595, 0, 0, 0, 0, 264, 0, 0, 0, 442,
	441, 451, 452, 444, 445, 446, 447, 448, 449, 450,
	443, 0, 526, 453, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 643,
	0, 303, 0, 0, 0, 189, 0, 302, 0, 0,
	0, 339, 198, 0, 0, 213, 204, 0, 0, 264,
	0, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 352, 320, 319, 321, 322, 323, 324,
	0, 0, 184, 325, 326, 327, 0, 648, 300, 313,
	0, 338, 0, 528, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 646, 0, 0, 264, 350, 0, 312,
	0, 0, 309, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 348,
	0, 0, 209, 0, 0, 0, 0, 185, 0, 212,
	208, 222, 180, 220, 215, 202, 194, 195, 179, 0,
	211, 188, 193, 187, 206, 217, 218, 186, 232, 183,
	226, 182, 0, 225, 205, 0, 216, 221, 203, 200,
	181, 219, 201, 199, 196, 190, 0, 0, 0, 214,
	223, 233, 0, 0, 228, 229, 230, 0, 0, 264,
	930, 0, 0, 0, 340, 349, 346, 347, 344, 345,
	343, 342, 341, 351, 334, 335, 337, 0, 336, 178,
	0, 197, 231, 210, 192, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 264, 264, 264, 264, 0, 0, 0,
	0, 0, 0, 783, 967, 0, 0, 264, 0, 0,
	930, 0, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 156, 128, 168, 105, 120, 177,
	121, 122, 148, 92, 136, 207, 118, 0, 108, 87,
	115, 88, 106, 130, 189, 133, 104, 158, 139, 76,
	174, 198, 143, 0, 213, 204, 0, 825, 132, 160,
	134, 155, 127, 149, 98, 142, 169, 119, 146, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 145, 164, 117, 147, 86, 144, 0, 90,
	93, 176, 162, 111, 112, 0, 0, 0, 0, 0,
	0, 0, 131, 135, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 141, 0, 0, 0,
	96, 91, 129, 0, 0, 0, 78, 0, 110, 153,
	0, 0, 0, 161, 126, 227, 163, 124, 123, 167,
	170, 209, 0, 159, 107, 116, 185, 114, 212, 208,
	222, 180, 220, 215, 202, 194, 195, 179, 0, 211,
	188, 193, 187, 206, 217, 218, 186, 232, 183, 226,
	182, 94, 225, 205, 95, 216, 221, 203, 200, 181,
	219, 201, 199, 196, 190, 0, 89, 0, 214, 223,
	233, 103, 75, 228, 229, 230, 79, 80, 0, 81,
	0, 82, 77, 101, 102, 99, 100, 137, 138, 171,
	172, 173, 154, 97, 0, 0, 157, 140, 178, 0,
	197, 231, 210, 192, 224, 0, 0, 0, 0, 113,
	175, 151, 150, 165, 0, 0, 191, 166, 156, 128,
	168, 105, 120, 177, 121, 122, 148, 92, 136, 207,
	118, 0, 108, 87, 115, 88, 106, 130, 189, 133,
	104, 158, 139, 531, 174, 198, 143, 0, 213, 204,
	0, 0, 132, 160, 134, 155, 127, 149, 98, 142,
	169, 119, 146, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 145, 164, 117, 147,
	86, 144, 0, 90, 93, 176, 162, 111, 112, 0,
	0, 0, 0, 0, 0, 0, 131, 135, 152, 125,
	0, 0, 0, 0, 0, 0, 946, 0, 109, 0,
	141, 0, 0, 0, 96, 91, 129, 0, 0, 0,
	530, 0, 110, 153, 0, 0, 0, 161, 126, 227,
	163, 124, 123, 167, 170, 209, 0, 159, 107, 116,
	185, 114, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 94, 225, 205, 95, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	89, 0, 214, 223, 233, 103, 532, 228, 229, 230,
	0, 0, 0, 0, 0, 0, 533, 101, 102, 99,
	100, 137, 138, 171, 172, 173, 154, 97, 0, 0,
	157, 140, 178, 0, 197, 231, 210, 192, 224, 0,
	0, 0, 0, 113, 175, 151, 150, 165, 0, 0,
	191, 166, 156, 128, 168, 105, 120, 177, 121, 122,
	148, 92, 136, 207, 118, 0, 108, 87, 115, 88,
	106, 130, 189, 133, 104, 158, 139, 531, 174, 198,
	143, 0, 213, 204, 0, 0, 132, 160, 134, 155,
	127, 149, 98, 142, 169, 119, 146, 49, 0, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	145, 164, 117, 147, 86, 144, 0, 90, 93, 176,
	162, 111, 112, 0, 0, 0, 0, 0, 0, 0,
	131, 135, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 141, 0, 0, 0, 96, 91,
	129, 0, 0, 0, 530, 0, 110, 153, 0, 0,
	0, 161, 126, 227, 163, 124, 123, 167, 170, 209,
	0, 159, 107, 116, 185, 114, 212, 208, 222, 180,
	220, 215, 202, 194, 195, 179, 0, 211, 188, 193,
	187, 206, 217, 218, 186, 232, 183, 226, 182, 94,
	225, 205, 95, 216, 221, 203, 200, 181, 219, 201,
	199, 196, 190, 0, 89, 0, 214, 223, 233, 103,
	532, 228, 229, 230, 0, 0, 0, 0, 0, 0,
	533, 101, 102, 99, 100, 137, 138, 171, 172, 173,
	154, 97, 0, 0, 157, 140, 178, 0, 197, 231,
	210, 192, 224, 0, 0, 0, 0, 113, 175, 151,
	150, 165, 0, 0, 191, 166, 156, 128, 168, 105,
	120, 177, 121, 122, 148, 92, 136, 207, 118, 0,
	108, 87, 115, 88, 106, 130, 189, 133, 104, 158,
	139, 531, 174, 198, 143, 0, 213, 204, 0, 0,
	132, 160, 134, 155, 127, 149, 98, 142, 169, 119,
	146, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 145, 164, 117, 147, 86, 144,
	0, 90, 93, 176, 162, 111, 112, 0, 0, 0,
	0, 0, 0, 0, 131, 135, 152, 125, 0, 0,
	0, 0, 0, 0, 839, 0, 109, 0, 141, 0,
	0, 0, 96, 91, 129, 0, 0, 0, 530, 0,
	110, 153, 0, 0, 0, 161, 126, 227, 163, 124,
	123, 167, 170, 209, 0, 159, 107, 116, 185, 114,
	212, 208, 222, 180, 220, 215, 202, 194, 195, 179,
	0, 211, 188, 193, 187, 206, 217, 218, 186, 232,
	183, 226, 182, 94, 225, 205, 95, 216, 221, 203,
	200, 181, 219, 201, 199, 196, 190, 0, 89, 0,
	214, 223, 233, 103, 532, 228, 229, 230, 0, 0,
	0, 0, 0, 0, 533, 101, 102, 99, 100, 137,
	138, 171, 172, 173, 154, 97, 0, 0, 157, 140,
	178, 0, 197, 231, 210, 192, 224, 0, 0, 0,
	0, 113, 175, 151, 150, 165, 0, 0, 191, 166,
	156, 128, 168, 105, 120, 177, 121, 122, 148, 92,
	136, 207, 118, 0, 108, 87, 115, 88, 106, 130,
	189, 133, 104, 158, 139, 531, 174, 198, 143, 0,
	213, 204, 0, 0, 132, 160, 134, 155, 127, 149,
	98, 142, 169, 119, 146, 0, 0, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 145, 164,
	117, 147, 86, 144, 0, 90, 93, 176, 162, 111,
	112, 0, 0, 0, 0, 0, 0, 0, 131, 135,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 141, 0, 0, 0, 96, 91, 129, 0,
	0, 0, 530, 0, 110, 153, 0, 0, 0, 161,
	126, 227, 163, 124, 123, 167, 170, 209, 0, 159,
	107, 116, 185, 114, 212, 208, 222, 180, 220, 215,
	202, 194, 195, 179, 0, 211, 188, 193, 187, 206,
	217, 218, 186, 232, 183, 226, 182, 94, 225, 205,
	95, 216, 221, 203, 200, 181, 219, 201, 199, 196,
	190, 0, 89, 0, 214, 223, 233, 103, 532, 228,
	229, 230, 0, 0, 0, 0, 0, 0, 533, 101,
	102, 99, 100, 137, 138, 171, 172, 173, 154, 97,
	0, 0, 157, 140, 178, 0, 197, 231, 210, 192,
	224, 0, 0, 0, 0, 113, 175, 151, 150, 165,
	0, 0, 191, 166, 156, 128, 168, 105, 120, 177,
	121, 122, 148, 92, 136, 207, 118, 0, 108, 87,
	115, 88, 106, 130, 189, 133, 104, 158, 139, 531,
	174, 198, 143, 0, 213, 204, 0, 0, 132, 160,
	134, 155, 127, 149, 98, 142, 169, 119, 146, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 145, 164, 117, 147, 86, 144, 0, 90,
	93, 176, 162, 111, 112, 0, 0, 0, 0, 0,
	0, 0, 131, 135, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 141, 0, 0, 0,
	96, 91, 129, 0, 0, 0, 530, 0, 110, 153,
	0, 0, 0, 161, 126, 227, 163, 124, 123, 167,
	170, 209, 0, 159, 107, 116, 185, 114, 212, 208,
	222, 180, 220, 215, 202, 194, 195, 179, 0, 211,
	188, 193, 187, 206, 217, 218, 186, 232, 183, 226,
	182, 94, 225, 205, 95, 216, 221, 203, 200, 181,
	219, 201, 199, 196, 190, 0, 89, 0, 214, 223,
	233, 103, 532, 228, 229, 230, 0, 0, 0, 0,
	0, 0, 533, 101, 102, 99, 100, 137, 138, 171,
	172, 173, 154, 97, 0, 0, 157, 140, 178, 0,
	197, 231, 210, 192, 224, 0, 0, 0, 0, 113,
	175, 151, 150, 165, 0, 0, 191, 166, 156, 128,
	168, 105, 120, 177, 121, 122, 148, 92, 136, 207,
	118, 0, 108, 87, 115, 88, 106, 130, 189, 133,
	104, 158, 139, 531, 174, 198, 143, 0, 213, 204,
	0, 0, 132, 160, 134, 155, 127, 149, 98, 142,
	169, 119, 146, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 145, 164, 117, 147,
	86, 144, 0, 90, 93, 176, 162, 111, 112, 0,
	0, 0, 0, 0, 0, 0, 131, 135, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	141, 0, 0, 0, 96, 91, 129, 0, 0, 0,
	530, 0, 110, 153, 0, 0, 0, 161, 126, 227,
	163, 124, 123, 167, 170, 209, 0, 159, 107, 116,
	185, 114, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 94, 225, 205, 95, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	89, 0, 214, 223, 233, 103, 532, 228, 229, 230,
	0, 0, 0, 0, 0, 0, 533, 101, 102, 99,
	100, 137, 138, 171, 172, 173, 154, 97, 0, 0,
	157, 140, 178, 0, 197, 231, 210, 192, 224, 0,
	0, 0, 0, 113, 175, 151, 150, 165, 207, 0,
	191, 0, 0, 303, 0, 0, 0, 189, 0, 302,
	0, 0, 0, 339, 198, 0, 0, 213, 204, 0,
	0, 0, 0, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 352, 320, 319, 321, 322,
	323, 324, 0, 0, 184, 325, 326, 327, 0, 0,
	300, 313, 0, 338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 646, 0, 0, 0, 350,
	0, 312, 0, 0, 309, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 348, 0, 0, 209, 0, 0, 0, 0, 185,
	0, 212, 208, 222, 180, 220, 215, 202, 194, 195,
	179, 0, 211, 188, 193, 187, 206, 217, 218, 186,
	232, 183, 226, 182, 0, 225, 205, 0, 216, 221,
	203, 200, 181, 219, 201, 199, 196, 190, 0, 0,
	0, 214, 223, 233, 0, 0, 228, 229, 230, 0,
	0, 0, 0, 0, 0, 0, 340, 349, 346, 347,
	344, 345, 343, 342, 341, 351, 334, 335, 337, 0,
	336, 178, 0, 197, 231, 210, 192, 224, 0, 207,
	0, 0, 0, 0, 303, 0, 0, 0, 189, 191,
	302, 0, 0, 0, 339, 198, 0, 0, 213, 204,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 294, 352, 320, 319, 321,
	322, 323, 324, 0, 0, 184, 325, 326, 327, 0,
	0, 300, 313, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 0, 0, 0, 0,
	350, 0, 312, 0, 0, 309, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 348, 0, 0, 209, 0, 0, 0, 0,
	185, 0, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 0, 225, 205, 0, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	0, 0, 214, 223, 233, 0, 0, 228, 229, 230,
	0, 0, 0, 0, 0, 0, 0, 340, 349, 346,
	347, 344, 345, 343, 342, 341, 351, 334, 335, 337,
	0, 336, 178, 22, 197, 231, 210, 192, 224, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 303,
	191, 0, 0, 189, 0, 302, 0, 0, 0, 339,
	198, 0, 0, 213, 204, 0, 0, 0, 0, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 352, 320, 319, 321, 322, 323, 324, 0, 0,
	184, 325, 326, 327, 0, 0, 300, 313, 0, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 0, 0, 0, 0, 350, 0, 312, 0, 0,
	309, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 348, 0, 0,
	209, 0, 0, 0, 0, 185, 0, 212, 208, 222,
	180, 220, 215, 202, 194, 195, 179, 0, 211, 188,
	193, 187, 206, 217, 218, 186, 232, 183, 226, 182,
	0, 225, 205, 0, 216, 221, 203, 200, 181, 219,
	201, 199, 196, 190, 0, 0, 0, 214, 223, 233,
	0, 0, 228, 229, 230, 0, 0, 0, 0, 0,
	0, 0, 340, 349, 346, 347, 344, 345, 343, 342,
	341, 351, 334, 335, 337, 0, 336, 178, 0, 197,
	231, 210, 192, 224, 0, 207, 0, 0, 0, 0,
	303, 0, 0, 0, 189, 191, 302, 0, 0, 0,
	339, 198, 0, 0, 213, 204, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 352, 320, 319, 321, 322, 323, 324, 0,
	0, 184, 325, 326, 327, 0, 0, 300, 313, 0,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 0, 0, 0, 0, 350, 0, 312, 0,
	0, 309, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 348, 0,
	0, 209, 0, 0, 0, 0, 185, 0, 212, 208,
	222, 180, 220, 215, 202, 194, 195, 179, 0, 211,
	188, 193, 187, 206, 217, 218, 186, 232, 183, 226,
	182, 0, 225, 205, 0, 216, 221, 203, 200, 181,
	219, 201, 199, 196, 190, 0, 0, 0, 214, 223,
	233, 0, 0, 228, 229, 230, 0, 0, 0, 0,
	0, 0, 0, 340, 349, 346, 347, 344, 345, 343,
	342, 341, 351, 334, 335, 337, 0, 336, 178, 207,
	197, 231, 210, 192, 224, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 339, 198, 191, 0, 213, 204,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 352, 320, 319, 321,
	322, 323, 324, 0, 0, 184, 325, 326, 327, 0,
	0, 0, 313, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 0, 0, 0, 0,
	350, 0, 312, 0, 0, 309, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 348, 0, 0, 209, 0, 0, 0, 0,
	185, 0, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 0, 225, 205, 0, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	0, 0, 214, 223, 233, 0, 0, 228, 229, 230,
	0, 0, 0, 0, 0, 0, 0, 340, 349, 346,
	347, 344, 345, 343, 342, 341, 351, 334, 335, 337,
	0, 336, 178, 207, 197, 231, 210, 192, 224, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 198,
	191, 0, 213, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 437, 0, 440, 0, 0, 0,
	512, 0, 454, 455, 456, 457, 458, 459, 460, 184,
	438, 439, 436, 442, 441, 451, 452, 444, 445, 446,
	447, 448, 449, 450, 443, 0, 0, 453, 0, 0,
	0, 0, 0, 0, 442, 441, 451, 452, 444, 445,
	446, 447, 448, 449, 450, 443, 0, 0, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 185, 0, 212, 208, 222, 180,
	220, 215, 202, 194, 195, 179, 0, 211, 188, 193,
	187, 206, 217, 218, 186, 232, 183, 226, 182, 0,
	225, 205, 0, 216, 221, 203, 200, 181, 219, 201,
	199, 196, 190, 0, 0, 0, 214, 223, 233, 0,
	207, 228, 229, 230, 759, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 213,
	204, 0, 0, 0, 0, 0, 178, 0, 197, 231,
	210, 192, 224, 0, 0, 0, 0, 512, 0, 761,
	0, 0, 0, 0, 191, 0, 184, 0, 0, 0,
	430, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 185, 0, 212, 208, 222, 180, 220, 215, 202,
	194, 195, 179, 0, 211, 188, 193, 187, 206, 217,
	218, 186, 232, 183, 226, 182, 0, 225, 205, 0,
	216, 221, 203, 200, 181, 219, 201, 199, 196, 190,
	22, 0, 0, 214, 223, 233, 0, 0, 228, 229,
	230, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 198, 381, 0,
	213, 204, 0, 178, 0, 197, 231, 210, 192, 224,
	0, 0, 0, 0, 0, 49, 0, 0, 512, 0,
	0, 191, 0, 393, 0, 0, 0, 184, 398, 399,
	400, 401, 402, 403, 404, 0, 405, 406, 407, 408,
	409, 394, 395, 396, 397, 379, 380, 0, 0, 382,
	0, 0, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 185, 0, 212, 208, 222, 180, 220, 215,
	202, 194, 195, 179, 0, 211, 188, 193, 187, 206,
	217, 218, 186, 232, 183, 226, 182, 0, 225, 205,
	0, 216, 221, 203, 200, 181, 219, 201, 199, 196,
	190, 0, 0, 0, 214, 223, 233, 207, 0, 228,
	229, 230, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 213, 204, 0, 0,
	0, 0, 0, 0, 178, 0, 197, 231, 210, 192,
	224, 0, 0, 0, 512, 0, 0, 510, 0, 0,
	511, 0, 191, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 185, 0,
	212, 208, 222, 180, 220, 215, 202, 194, 195, 179,
	0, 211, 188, 193, 187, 206, 217, 218, 186, 232,
	183, 226, 182, 0, 225, 205, 0, 216, 221, 203,
	200, 181, 219, 201, 199, 196, 190, 0, 0, 0,
	214, 223, 233, 207, 0, 228, 229, 230, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 213, 204, 0, 0, 0, 0, 0, 0,
	178, 0, 197, 231, 210, 192, 224, 0, 0, 0,
	235, 0, 931, 0, 0, 0, 0, 0, 191, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 185, 0, 212, 208, 222, 180,
	220, 215, 202, 194, 195, 179, 0, 211, 188, 193,
	187, 206, 217, 218, 186, 232, 183, 226, 182, 0,
	225, 205, 0, 216, 221, 203, 200, 181, 219, 201,
	199, 196, 190, 0, 0, 0, 214, 223, 233, 207,
	0, 228, 229, 230, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 213, 204,
	0, 0, 0, 0, 0, 0, 178, 0, 197, 231,
	210, 192, 224, 49, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 191, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	185, 0, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 0, 225, 205, 0, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	0, 0, 214, 223, 233, 207, 0, 228, 229, 230,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 213, 204, 0, 0, 0, 0,
	0, 0, 178, 0, 197, 231, 210, 192, 224, 0,
	0, 0, 512, 0, 761, 0, 0, 0, 0, 0,
	191, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 185, 0, 212, 208,
	222, 180, 220, 215, 202, 194, 195, 179, 0, 211,
	188, 193, 187, 206, 217, 218, 186, 232, 183, 226,
	182, 0, 225, 205, 0, 216, 221, 203, 200, 181,
	219, 201, 199, 196, 190, 0, 0, 0, 214, 223,
	233, 207, 0, 228, 229, 230, 0, 0, 0, 365,
	189, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	213, 204, 0, 0, 0, 0, 0, 0, 178, 0,
	197, 231, 210, 192, 224, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 0, 0, 191, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 185, 0, 212, 208, 222, 180, 220, 215,
	202, 194, 195, 179, 0, 211, 188, 193, 187, 206,
	217, 218, 186, 232, 183, 226, 182, 0, 225, 205,
	0, 216, 221, 203, 200, 181, 219, 201, 199, 196,
	190, 0, 0, 0, 214, 223, 233, 207, 0, 228,
	229, 230, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 213, 204, 0, 0,
	0, 0, 0, 0, 178, 0, 197, 231, 210, 192,
	224, 0, 0, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 191, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 185, 0,
	212, 208, 222, 180, 220, 215, 202, 194, 195, 179,
	0, 211, 188, 193, 187, 206, 217, 218, 186, 232,
	183, 226, 182, 0, 225, 205, 0, 216, 221, 203,
	200, 181, 219, 201, 199, 196, 190, 0, 0, 0,
	214, 223, 233, 207, 0, 228, 229, 230, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 213, 204, 0, 0, 0, 0, 0, 0,
	178, 0, 197, 231, 210, 192, 224, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 191, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 185, 0, 212, 208, 222, 180,
	220, 215, 202, 194, 195, 179, 0, 211, 188, 193,
	187, 206, 217, 218, 186, 232, 183, 226, 182, 0,
	225, 205, 0, 216, 221, 203, 200, 181, 219, 201,
	199, 196, 190, 0, 0, 0, 214, 223, 233, 207,
	0, 228, 229, 230, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 213, 204,
	0, 0, 0, 0, 0, 0, 178, 0, 197, 231,
	210, 192, 224, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 191, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	185, 0, 212, 208, 222, 180, 220, 215, 202, 194,
	195, 179, 0, 211, 188, 193, 187, 206, 217, 218,
	186, 232, 183, 226, 182, 0, 225, 205, 0, 216,
	221, 203, 200, 181, 219, 201, 199, 196, 190, 0,
	589, 0, 214, 223, 233, 0, 0, 228, 229, 230,
	22, 47, 24, 25, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 42, 0,
	0, 0, 178, 26, 197, 231, 210, 192, 224, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	191, 0, 34, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 582, 578, 0, 581,
	583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 29, 30, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	43, 36, 0, 0, 44, 45, 31, 0, 0, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	37, 0, 0, 38, 39, 0, 41, 40,
}
var yyPact = [...]int{

	5714, -1000, -175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	705, 736, -1000, -1000, -1000, -1000, -1000, 549, -30, -7,
	-32, 27, 7, 1548, 5542, -1000, -1000, 313, -1000, -166,
	-1000, -1000, -1000, -1000, -1000, -1000, 577, -1000, -1000, -1000,
	-1000, -1000, 683, 706, 593, 690, 624, -1000, -7, 5542,
	727, -1000, -146, 358, -11, 450, -11, 5, -1000, -13,
	433, -13, 5542, 5542, -1000, 726, -85, 720, -34, -1000,
	-1000, -92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 386, 660,
	3608, 3608, 705, -1000, 577, -1000, -1000, -1000, 652, -1000,
	-1000, 261, 5074, 645, 59, 5542, 697, 501, -1000, 4225,
	5542, 219, 576, 5542, 5542, 5542, 673, 575, 5542, -1000,
	-1000, -1000, 5542, 717, 5542, 5542, 5542, -1000, -1000, 716,
	-1000, -1000, -1000, -1000, -1000, -1000, 731, 72, 522, -1000,
	3608, 3955, 374, 374, -1000, -1000, 39, -1000, -1000, 3792,
	3792, 3792, 3792, 3792, 3792, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, 56,
	-1000, 3417, 374, 374, 374, 374, 374, 374, 3608, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, -1000, -1000, 545, -1000, 227, 683, 386, 624,
	4450, 590, -1000, -1000, 601, 5542, -1000, 5386, 2832, 714,
	-150, -162, 228, 220, -78, -1000, -1000, 542, -1000, 542,
	542, 542, 542, -54, -54, -54, -54, -1000, -1000, -1000,
	-1000, -1000, 558, -1000, 542, 542, 542, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 557, 557, 557, 547, 547,
	-1000, 671, 5542, -1000, 5696, -1000, -1000, 5542, -1000, -1000,
	714, 5542, -1000, -1000, -1000, 683, -106, -1000, 630, 3608,
	3608, 291, 3608, 3608, 95, 3792, 314, 206, 3792, 3792,
	3792, 3792, 3792, 3792, 3792, 3792, 3792, 3792, 3792, 3792,
	3792, 3792, 3792, 317, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 420, -1000, 577, 556, 556, 73, 73, 73,
	73, 73, 3976, 1299, 2618, 386, 482, 213, 3417, 3031,
	3031, 3608, 3608, 3031, 677, 197, 213, 5230, -1000, 386,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3031, 3031, 3031,
	3031, 3608, -1000, -1000, -1000, 660, -1000, 677, 704, -1000,
	637, 636, -1000, -1000, 3031, -1000, 571, 5386, 374, -1000,
	4294, -1000, 580, -1000, 184, -1000, 53, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 705, 3608, 374, -1000, -73, 151,
	-1000, -1000, 550, 665, 153, 418, -1000, -1000, 651, -1000,
	248, -80, -1000, -1000, 310, -54, -54, -1000, -1000, 66,
	644, 66, 66, 66, 325, -1000, -1000, -1000, -1000, 302,
	-1000, -1000, -1000, 295, -1000, -1000, 1976, -1000, 149, 146,
	-5, -18, -21, -22, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	324, 628, 95, 180, -1000, -1000, 242, -1000, -1000, 213,
	213, 1119, -1000, -1000, -1000, -1000, 314, 3792, 3792, 3792,
	144, 1119, 1201, 468, 735, 73, 367, 367, 70, 70,
	70, 70, 70, 233, 233, -1000, -1000, -1000, 386, -1000,
	-1000, -1000, 386, 3031, 530, -1000, -1000, 4133, 50, 374,
	45, -1000, -1000, -1000, 3608, -1000, 386, 447, 447, 99,
	278, 447, 3031, 225, -1000, 3608, 386, -1000, 447, 386,
	447, 447, -1000, -1000, 5542, -1000, -1000, -1000, -1000, 565,
	-1000, 661, 499, 486, -1000, -1000, 3222, 386, 467, 44,
	705, 5386, 3608, 2618, 683, 213, 414, 648, 117, 404,
	5230, -1000, 379, -1000, -1000, -74, 372, -1000, -1000, -1000,
	461, 66, 66, -1000, 373, 124, -1000, -1000, -1000, 464,
	-1000, 526, 456, -1000, -1000, -1000, -1000, -1000, 5542, -1000,
	-1000, -1000, -1000, -1000, 366, -55, 549, 360, 358, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 144, 1119, 1168,
	-1000, 3792, 3792, -1000, -1000, 447, 3031, -1000, -1000, 4918,
	-1000, -1000, 2190, 3031, 2404, 213, -1000, -1000, -1000, 193,
	317, 193, -131, 516, 192, -1000, 3608, 236, -1000, -1000,
	-1000, -1000, -1000, -1000, 714, 4762, 664, -1000, 374, -1000,
	-1000, 541, 5230, 5230, 683, -1000, 213, -1000, -1000, 386,
	-1000, -60, 285, -1000, 445, -1000, 542, -1000, 126, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 322, 281, -1000, 279, -1000, -1000, -1000, 642, -1000,
	-1000, -1000, -1000, 3792, 1119, 1119, -1000, -1000, -1000, -1000,
	43, 386, -1000, 386, 542, 542, -1000, 542, 547, -1000,
	542, -37, 542, -38, 386, 386, 374, -128, -1000, 213,
	3608, 712, 493, 596, -1000, -1000, -1000, 675, 1029, 54,
	730, -1000, 374, -1000, 577, 38, -1000, -1000, 1976, 104,
	-1000, -1000, 5230, -1000, 250, 654, -1000, 653, -1000, 459,
	448, 354, 1119, 1762, -1000, -1000, -1000, 57, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3792, 386, 321, 213,
	710, 687, 4762, 4762, 4762, 4762, -1000, 621, 619, -1000,
	606, 589, 615, 5542, -1000, 385, 1029, 125, -1000, 4606,
	-1000, -1000, 5386, 486, 386, 5230, -1000, 335, -1000, -1000,
	320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42,
	-1000, -1000, -1000, 3608, 3608, 596, 568, 435, -1000, -1000,
	-1000, -1000, 614, -1000, 609, -1000, -1000, -1000, -1000, -1000,
	0, -1, -2, -1000, 480, -1000, -1000, -1000, -1000, 386,
	21, -139, 213, 474, 3608, 3608, -1000, -1000, 374, 374,
	374, -1000, 627, -135, -142, 213, 213, 5230, 5230, 5230,
	-1000, 604, -1000, 371, -1000, 371, 371, -137, -1000, 5230,
	-1000, -1000, -140, -1000, -143, -1000,
}
var yyPgo = [...]int{

	0, 951, 950, 949, 948, 947, 921, 7, 441, 917,
	912, 910, 909, 908, 904, 903, 900, 891, 880, 878,
	877, 875, 874, 53, 872, 871, 868, 40, 867, 57,
	866, 865, 864, 23, 104, 19, 22, 1, 863, 17,
	25, 12, 861, 859, 10, 857, 858, 856, 855, 854,
	853, 2, 21, 850, 849, 848, 847, 44, 4, 845,
	844, 843, 841, 835, 820, 36, 3, 14, 33, 16,
	819, 30, 6, 817, 43, 815, 814, 813, 809, 37,
	808, 48, 807, 45, 42, 804, 28, 9, 39, 800,
	347, 797, 278, 301, 796, 795, 792, 38, 0, 58,
	26, 20, 789, 610, 47, 5, 788, 787, 82, 13,
	27, 18, 785, 784, 782, 781, 777, 776, 775, 160,
	774, 773, 24, 32, 772, 769, 768, 764, 763, 52,
	11, 762, 761, 758, 755, 31, 754, 41, 29, 753,
	751, 749, 15, 747, 746, 743, 50, 46, 742, 147,
}
var yyR1 = [...]int{

	0, 144, 145, 145, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 138, 140, 125, 125, 124, 124, 126, 126, 139,
	139, 139, 135, 113, 113, 113, 116, 116, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	117, 117, 117, 117, 117, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 134,
	134, 119, 119, 129, 129, 130, 130, 130, 127, 127,
	128, 128, 131, 131, 131, 120, 120, 120, 120, 120,
	132, 132, 122, 122, 122, 123, 123, 133, 133, 133,
	133, 133, 121, 121, 136, 141, 141, 141, 141, 137,
	137, 143, 143, 142, 16, 16, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 1, 19, 2, 3, 4,
	5, 5, 5, 5, 112, 112, 112, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 32, 32, 48,
	48, 21, 22, 22, 22, 22, 148, 23, 24, 24,
	25, 25, 25, 29, 29, 29, 27, 27, 28, 28,
	35, 35, 34, 34, 36, 36, 36, 36, 102, 102,
	102, 101, 101, 38, 38, 39, 39, 40, 40, 41,
	41, 41, 49, 42, 42, 42, 42, 107, 107, 106,
	106, 106, 105, 105, 43, 43, 43, 43, 44, 44,
	44, 44, 45, 45, 47, 47, 46, 46, 50, 50,
	50, 50, 51, 51, 52, 52, 37, 37, 37, 37,
	37, 37, 37, 91, 91, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 64, 64, 64,
	64, 64, 64, 55, 55, 55, 55, 55, 55, 55,
	33, 33, 65, 65, 65, 71, 66, 66, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 62, 62,
	62, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	61, 61, 61, 61, 61, 61, 61, 61, 149, 149,
	63, 63, 63, 63, 30, 30, 30, 30, 30, 110,
	110, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 75, 75, 31, 31, 73, 73,
	74, 76, 76, 72, 72, 72, 57, 57, 57, 57,
	57, 57, 57, 59, 59, 59, 77, 77, 78, 78,
	79, 79, 80, 80, 81, 82, 82, 82, 83, 83,
	83, 83, 84, 84, 84, 56, 56, 56, 56, 56,
	56, 85, 85, 85, 85, 86, 86, 67, 67, 69,
	69, 68, 70, 87, 87, 88, 89, 89, 92, 92,
	93, 93, 90, 90, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 95, 95, 95, 96, 96, 99,
	99, 100, 100, 103, 103, 104, 104, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 146,
	147, 108, 109, 109, 109,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 5, 4, 3, 3, 2, 2, 3,
	2, 3, 2, 2, 1, 1, 1, 3, 5, 6,
	5, 5, 5, 3, 3, 6, 3, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -144, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 108, 109,
	110, 132, 112, 125, 48, 210, 127, 216, 219, 220,
	223, 222, 24, 126, 130, 131, -146, 7, 194, 51,
	-145, 224, -79, 14, -25, 5, -23, -148, -23, -23,
	-23, -108, -138, 51, 186, 116, 115, -90, 119, 115,
	116, 186, 115, 115, -112, 174, 31, 184, 108, 178,
	179, 181, 183, 54, -97, -98, 68, 21, 23, 168,
	71, 103, 15, 72, 153, 156, 102, 195, 46, 187,
	188, 185, 186, 173, 28, 9, 24, 126, 20, 96,
	110, 75, 76, 211, 129, 22, 127, 66, 18, 49,
	10, 12, 13, 120, 119, 87, 116, 44, 7, 104,
	25, 84, 40, 27, 42, 85, 16, 189, 190, 30,
	199, 98, 47, 34, 69, 64, 50, 67, 14, 45,
	214, 213, 86, 111, 194, 43, 6, 198, 29, 125,
	41, 115, 74, 118, 65, 215, 5, 121, 8, 48,
	122, 191, 192, 193, 32, 212, 73, 11, 200, 139,
	133, 161, 152, 150, 63, 128, 148, 144, 142, 26,
	166, 218, 205, 143, 137, 138, 165, 202, 33, 164,
	160, 163, 136, 159, 37, 155, 145, 17, 131, 123,
	204, 141, 130, 36, 170, 135, 157, 146, 147, 162,
	134, 158, 132, 171, 206, 154, 151, 117, 175, 176,
	177, 203, 149, 172, -103, 54, -98, -108, -108, 57,
	-108, 221, -108, -108, -108, -108, -108, -108, -7, -83,
	16, 15, -10, -8, -146, 6, 19, 20, -29, 38,
	39, -24, -90, -46, -103, 10, 207, -139, -135, 54,
	-93, 120, 54, -93, 115, -92, 120, 54, -92, -46,
	-46, -108, 10, 174, 10, 115, 186, -108, -108, 180,
	-108, -108, -108, -147, 53, -84, 18, 30, -37, -53,
	69, -58, 28, 22, -57, -54, -72, -70, -71, 103,
	92, 93, 100, 70, 104, -62, -60, -61, -63, 56,
	55, 57, 58, 59, 60, 64, 65, 66, -99, -103,
	-68, -146, 42, 43, 195, 196, 199, 197, 72, 32,
	185, 193, 192, 191, 189, 190, 187, 188, 120, 186,
	98, 194, 54, -98, -80, -81, -37, -79, -7, -23,
	34, -27, 20, 62, -47, 25, -46, 29, 105, -46,
	15, 53, 52, -113, -116, -118, -117, -114, -115, 150,
	151, 103, 154, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 128, 146, 147, 148, 149, 133, 134,
	135, 136, 137, 138, 139, 141, 142, 143, 144, 145,
	-103, 69, 50, -46, -46, -46, 22, 50, -103, -46,
	-48, 10, -46, -46, -46, -32, 10, 8, 87, 68,
	67, 84, 52, 17, -37, -55, 87, 69, 85, 86,
	71, 89, 88, 99, 92, 93, 94, 95, 96, 97,
	98, 90, 91, 102, 77, 78, 79, 80, 81, 82,
	83, -91, -146, -71, -146, 106, 107, -58, -58, -58,
	-58, -58, -58, -146, 105, -7, -66, -37, -146, -146,
	-146, -146, -146, -146, -146, -75, -37, -146, -149, -146,
	-149, -149, -149, -149, -149, -149, -149, -146, -146, -146,
	-146, 52, -82, 23, 24, -83, -147, -29, -59, -99,
	57, 60, 54, -98, -28, 41, -56, 29, 32, -7,
	-146, -46, -87, -88, -72, -99, -103, -104, -103, -97,
	108, 31, 174, 184, -52, 11, 209, -140, -125, 218,
	-135, -136, -141, 123, 121, -137, 116, 27, -131, 64,
	69, -127, 171, -119, 51, -119, -119, -119, -119, -122,
	153, -122, -122, -122, 51, -119, -119, -119, -129, 51,
	-129, -129, -130, 51, -130, 22, -46, -94, 111, 218,
	195, 113, 110, 114, 109, 168, 153, 63, 28, 14,
	206, 54, -46, -108, -52, -46, -108, -108, -108, -83,
	182, 36, -37, -37, -64, 64, 69, 65, 66, -37,
	-37, -58, -65, -68, -71, 61, 87, 85, 86, 71,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -110, 54, 56, 54, -57,
	-57, -99, -35, 20, -34, -36, 94, -37, -103, -100,
	-104, -99, -97, -147, 52, -147, -7, -34, -34, -37,
	-37, -34, -27, -73, -74, 73, -99, -147, -34, -35,
	-34, -34, -81, -84, -89, 18, 10, 32, 32, -34,
	-86, 50, -87, -67, -69, -68, -146, -7, -85, -99,
	-52, 52, 77, 105, -79, -37, -146, -126, 168, 77,
	51, 27, -137, 54, 54, -120, 28, 64, -128, 172,
	57, -122, -122, -123, 102, 29, -123, -123, -123, -134,
	56, 57, 57, -109, -146, -100, -97, -108, -95, -96,
	118, 21, 116, 27, 77, 118, 124, 124, 124, -108,
	-108, 56, 37, 64, 65, 66, -65, -58, -58, -58,
	-33, 129, 68, -147, -147, -34, 52, -102, -101, 21,
	-99, 56, 105, -146, 105, -37, -147, -147, -147, 52,
	122, 21, -147, -34, -76, -74, 75, -37, -147, -147,
	-147, -147, -147, -46, -38, 10, 26, -86, 52, -147,
	-147, -147, 52, 105, -79, -88, -37, -100, -83, 54,
	-124, 28, 77, 54, -143, -142, -99, 54, -132, 168,
	56, 57, 58, 64, 53, -123, -123, 54, 54, 103,
	53, 52, 52, 53, 52, -46, -108, 54, 153, -138,
	54, -135, -33, 68, -58, -58, -147, -36, -101, 94,
	-104, -35, -100, -111, 103, 150, 128, 148, 144, 165,
	155, 170, 146, 171, -110, -111, 200, -79, 76, -37,
	74, -52, -39, -40, -41, -42, -49, -71, -146, -46,
	27, -69, 32, -7, -146, -99, -99, -83, -147, 156,
	57, 53, 52, -119, -133, 123, 27, 121, 56, 57,
	57, 29, -58, 105, -147, -147, -119, -119, -119, -130,
	-119, 138, -119, 138, -147, -147, -146, -31, 198, -37,
	-77, 12, 52, -43, -44, -45, 40, 44, 46, 41,
	42, 43, 47, -107, 21, -39, -146, -106, -105, 21,
	-103, 56, 8, -67, -7, 105, -109, 77, -142, -121,
	63, 27, 27, 53, 53, 54, 94, -122, 54, -58,
	-147, 56, -78, 13, 15, -40, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -44, -103, -147, -50,
	48, 119, 49, -105, -87, -147, -99, 54, 56, -30,
	87, 203, -37, -66, 50, 50, 40, 40, 116, 116,
	116, -147, 201, 47, 204, -37, -37, -146, -146, -146,
	37, 202, 205, -51, -99, -51, -51, 37, -147, 52,
	-147, -147, 203, -99, 204, 205,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	390, 0, 176, 176, 176, 176, 611, 0, 0, 432,
	0, 0, 0, 0, 0, 611, 611, 0, 611, 0,
	611, 611, 611, 611, 611, 611, 0, 31, 32, 609,
	1, 3, 398, 0, 0, 180, 183, 178, 432, 0,
	0, 35, 36, 0, 430, 0, 430, 0, 433, 428,
	0, 428, 0, 0, 611, 535, 493, 536, 469, 611,
	611, 0, 611, 154, 155, 156, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 171, 453, 454, 147, 148, 611,
	150, 611, 152, 153, 172, 173, 174, 175, 25, 402,
	0, 0, 390, 27, 0, 176, 181, 182, 186, 184,
	185, 177, 0, 0, 236, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	146, 157, 0, 169, 0, 0, 0, 163, 164, 167,
	166, 149, 151, 26, 610, 21, 0, 0, 399, 246,
	0, 251, 253, 0, 288, 289, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 317, 376,
	377, 378, 379, 380, 381, 382, 255, 256, 373, 0,
	422, 0, 0, 0, 0, 0, 0, 0, 364, 0,
	338, 338, 338, 338, 338, 338, 338, 338, 0, 0,
	0, 0, -2, -2, 391, 392, 395, 398, 25, 183,
	0, 188, 187, 179, 0, 0, 235, 0, 0, 244,
	0, 43, 0, 102, 98, 54, 55, 91, 57, 91,
	91, 91, 91, 112, 112, 112, 112, 83, 84, 85,
	86, 87, 0, 70, 91, 91, 91, 74, 58, 59,
	60, 61, 62, 63, 64, 93, 93, 93, 95, 95,
	38, 0, 0, 40, 0, 142, 429, 0, 144, 611,
	244, 0, 611, 611, 611, 398, 0, 403, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 277, 278,
	279, 252, 0, 266, 0, 0, 0, 308, 309, 310,
	311, 312, 0, 190, 0, 25, 0, 286, 0, 0,
	0, 0, 0, 0, 186, 0, 365, 0, 330, 0,
	331, 332, 333, 334, 335, 336, 337, 0, 190, 0,
	0, 0, 394, 396, 397, 402, 28, 186, 0, 383,
	0, 0, 449, 450, 0, 189, 415, 0, 0, -2,
	0, 234, 244, 423, 0, 373, 0, 237, 455, 456,
	469, 493, 535, 536, 390, 0, 0, 41, 47, 0,
	50, 51, 0, 0, 0, 0, 129, 130, 105, 103,
	0, 100, 99, 56, 0, 112, 112, 77, 78, 115,
	0, 115, 115, 115, 0, 71, 72, 73, 65, 0,
	66, 67, 68, 0, 69, 431, 612, 611, 444, 0,
	441, 0, 439, 0, 434, 435, 436, 437, 438, 440,
	442, 443, 143, 158, 611, 170, 160, 161, 162, 611,
	0, 0, 247, 248, 250, 267, 0, 269, 271, 400,
	401, 257, 258, 282, 283, 284, 0, 0, 0, 0,
	280, 262, 0, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 307, 349, 350, 0, 305,
	306, 313, 0, 0, 191, 192, 194, 198, 0, 374,
	0, 451, -2, 285, 0, 421, 25, 0, 0, 0,
	0, 0, 0, 371, 368, 0, 0, 339, 0, 0,
	0, 0, 393, 22, 0, 426, 427, 384, 385, 203,
	29, 0, 415, 405, 417, 419, 0, 25, 0, 411,
	390, 0, 0, 0, 398, 245, 0, 45, 0, 0,
	0, 125, 0, 127, 128, 110, 0, 104, 53, 101,
	0, 115, 115, 79, 0, 0, 80, 81, 82, 0,
	89, 0, 0, 39, 613, 614, 452, 134, 0, 611,
	445, 446, 447, 448, 0, 0, 0, 0, 0, 159,
	165, 168, 404, 268, 270, 272, 259, 280, 263, 0,
	260, 0, 0, 254, 318, 0, 0, 195, 199, 0,
	201, 202, 0, 190, 0, 287, -2, 321, 322, 0,
	0, 0, 0, 390, 0, 369, 0, 0, 329, 340,
	341, 342, 343, 23, 244, 0, 0, 30, 0, 420,
	-2, 0, 0, 0, 398, 424, 425, 374, 34, 0,
	42, 0, 0, 44, 0, 131, 91, 126, 117, 111,
	106, 107, 108, 109, 92, 75, 76, 116, 113, 114,
	88, 0, 0, 96, 0, 135, 136, 137, 0, 139,
	140, 141, 261, 0, 281, 264, 319, 193, 200, 196,
	0, 0, 375, 0, 91, 91, 354, 91, 95, 357,
	91, 359, 91, 362, 0, 0, 0, 366, 328, 372,
	0, 386, 204, 205, 207, 208, 209, 217, 0, 219,
	0, 418, 0, -2, 0, 413, 412, 33, 612, 0,
	48, 124, 0, 133, 122, 0, 119, 121, 90, 0,
	0, 0, 265, 0, 320, 323, 351, 112, 355, 356,
	358, 360, 361, 363, 325, 324, 0, 0, 0, 370,
	388, 0, 0, 0, 0, 0, 224, 0, 0, 227,
	0, 0, 0, 0, 218, 0, 0, 238, 220, 0,
	222, 223, 0, 408, 25, 0, 37, 0, 132, 52,
	0, 118, 120, 94, 97, 138, 197, 352, 353, 344,
	327, 367, 24, 0, 0, 206, 213, 0, 216, 225,
	226, 228, 0, 230, 0, 232, 233, 210, 211, 212,
	0, 0, 0, 221, 416, -2, 414, 46, 123, 0,
	0, 0, 389, 387, 0, 0, 229, 231, 0, 0,
	0, 326, 0, 0, 0, 214, 215, 0, 0, 0,
	345, 0, 348, 0, 242, 0, 0, 346, 239, 0,
	240, 241, 0, 243, 0, 347,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	51, 53, 94, 92, 52, 93, 105, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 224,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:266
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:271
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:272
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:276
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:298
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:327
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:344
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:377
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:395
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:401
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:408
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:416
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:423
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:434
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:441
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:447
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:456
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:469
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:475
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:484
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:490
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:668
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:673
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:677
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:682
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:704
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:774
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:787
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:791
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:796
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:804
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:817
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:827
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:837
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:865
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:871
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:877
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:881
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:886
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:891
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:895
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:899
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:903
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:907
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:914
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:922
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:927
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.statement = &Xa{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:955
		{
			yyVAL.statement = &Explain{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:961
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:967
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:998
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.tableName = TableName{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.statement = &OtherRead{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1087
		{
			setAllowComments(yylex, true)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.bytes2 = nil
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = UnionStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = UnionAllStr
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = UnionDistinctStr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.str = SQLCacheStr
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = DistinctStr
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = StraightJoinHint
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.selectExprs = nil
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.empty = struct{}{}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.empty = struct{}{}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = JoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = JoinStr
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = JoinStr
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = StraightJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.str = LeftJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.str = LeftJoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.str = RightJoinStr
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.str = RightJoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.str = NaturalJoinStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.indexHints = nil
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = IsNullStr
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = IsNotNullStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = IsTrueStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = IsNotTrueStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = IsFalseStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = IsNotFalseStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = EqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.str = LessThanStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.str = GreaterThanStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.str = LessEqualStr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.str = GreaterEqualStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.str = NotEqualStr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1687
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1709
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 325:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 326:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = BooleanModeStr
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.str = QueryExpansionStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.expr = nil
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.str = string("")
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.expr = &NullVal{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.exprs = nil
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.orderBy = nil
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = AscScr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.str = AscScr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.str = DescScr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.limit = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.str = ForUpdateStr
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.str = ShareModeStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2159
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.updateExprs = nil
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.byt = 0
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.byt = 1
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.byt = 0
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.byt = 1
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.str = IgnoreStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			decNesting(yylex)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2519
		{
			forceEOF(yylex)
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2524
		{
			forceEOF(yylex)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			forceEOF(yylex)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
