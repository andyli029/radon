//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const CHECKSUM = 57374
const FULLTEXT = 57375
const PARSER = 57376
const NGRAM = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const MODIFY = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const LIST_ATTACH = 57559
const DETACH = 57560

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"LIST_ATTACH",
	"DETACH",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 291,
	82, 605,
	-2, 40,
	-1, 296,
	82, 500,
	-2, 451,
	-1, 397,
	110, 487,
	-2, 483,
	-1, 398,
	110, 488,
	-2, 484,
	-1, 576,
	5, 27,
	-2, 427,
	-1, 713,
	110, 490,
	-2, 486,
	-1, 824,
	5, 28,
	-2, 306,
	-1, 848,
	5, 28,
	-2, 428,
	-1, 935,
	5, 27,
	-2, 430,
	-1, 1041,
	5, 28,
	-2, 431,
}

const yyNprod = 657
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 7309

var yyAct = [...]int{

	398, 709, 485, 992, 373, 351, 1075, 926, 978, 579,
	630, 863, 884, 292, 536, 3, 743, 989, 905, 817,
	742, 697, 617, 587, 707, 270, 809, 66, 375, 306,
	580, 74, 739, 353, 591, 72, 157, 704, 253, 723,
	674, 56, 602, 712, 400, 340, 349, 406, 925, 626,
	474, 289, 295, 279, 287, 376, 50, 60, 706, 262,
	264, 263, 259, 55, 253, 269, 74, 943, 647, 596,
	294, 593, 304, 942, 1087, 1074, 256, 1086, 1066, 1084,
	1002, 1073, 646, 62, 63, 64, 65, 918, 156, 972,
	547, 1065, 1050, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 323, 50, 514, 869, 870,
	871, 1008, 649, 329, 275, 659, 872, 140, 141, 327,
	321, 645, 770, 610, 950, 758, 944, 890, 1014, 618,
	967, 965, 313, 24, 51, 26, 27, 795, 1006, 794,
	793, 338, 906, 314, 253, 253, 1036, 1038, 827, 605,
	309, 46, 139, 792, 1060, 603, 28, 1059, 605, 36,
	1058, 605, 310, 312, 491, 490, 250, 908, 642, 640,
	636, 144, 639, 641, 999, 143, 324, 957, 788, 37,
	307, 492, 53, 910, 790, 914, 851, 909, 142, 907,
	611, 823, 763, 821, 912, 505, 506, 507, 508, 509,
	510, 511, 504, 752, 911, 514, 526, 527, 1051, 913,
	915, 535, 644, 413, 504, 592, 877, 514, 1037, 828,
	514, 489, 562, 563, 257, 492, 1001, 643, 618, 490,
	860, 791, 491, 490, 759, 751, 417, 1007, 873, 1005,
	30, 31, 32, 604, 34, 492, 1064, 920, 601, 492,
	600, 253, 604, 681, 638, 604, 724, 35, 47, 39,
	464, 768, 48, 49, 33, 648, 878, 679, 680, 678,
	1046, 491, 490, 343, 401, 316, 637, 494, 789, 724,
	787, 834, 308, 408, 253, 954, 953, 253, 492, 74,
	403, 334, 336, 294, 74, 802, 803, 804, 419, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 253,
	53, 514, 253, 253, 253, 402, 493, 253, 335, 335,
	677, 253, 945, 253, 253, 253, 52, 782, 491, 490,
	607, 50, 491, 490, 404, 922, 608, 486, 667, 669,
	670, 829, 38, 416, 668, 492, 781, 495, 40, 492,
	138, 41, 42, 311, 44, 43, 771, 332, 374, 45,
	503, 502, 512, 513, 505, 506, 507, 508, 509, 510,
	511, 504, 1062, 698, 514, 699, 1017, 952, 486, 799,
	481, 780, 524, 1081, 339, 545, 507, 508, 509, 510,
	511, 504, 491, 490, 514, 22, 251, 1043, 976, 339,
	339, 810, 1011, 523, 525, 307, 74, 947, 946, 492,
	568, 253, 892, 283, 253, 889, 74, 582, 581, 590,
	294, 866, 285, 865, 576, 815, 339, 1010, 564, 534,
	883, 882, 537, 538, 539, 540, 541, 542, 543, 861,
	546, 548, 548, 548, 548, 548, 548, 548, 548, 556,
	557, 558, 559, 857, 274, 597, 764, 584, 566, 755,
	619, 620, 621, 880, 879, 577, 586, 589, 850, 339,
	661, 700, 253, 632, 24, 465, 253, 549, 550, 551,
	552, 553, 554, 555, 1009, 365, 364, 366, 367, 368,
	369, 895, 664, 665, 370, 671, 672, 574, 653, 661,
	339, 874, 285, 285, 575, 658, 425, 424, 57, 628,
	629, 503, 502, 512, 513, 505, 506, 507, 508, 509,
	510, 511, 504, 53, 315, 514, 675, 740, 24, 750,
	588, 676, 750, 846, 74, 976, 24, 843, 703, 486,
	294, 881, 718, 719, 815, 565, 650, 74, 415, 711,
	815, 725, 715, 980, 983, 984, 985, 981, 934, 982,
	986, 560, 401, 1055, 980, 983, 984, 985, 981, 53,
	982, 986, 276, 701, 702, 750, 612, 53, 74, 582,
	581, 50, 748, 815, 741, 53, 631, 67, 713, 760,
	754, 721, 746, 537, 627, 728, 622, 716, 717, 1054,
	868, 720, 740, 749, 744, 731, 634, 471, 1029, 285,
	732, 1027, 1057, 1030, 572, 727, 1028, 729, 730, 1056,
	1026, 53, 1025, 613, 614, 615, 616, 662, 1079, 753,
	738, 745, 1072, 50, 801, 253, 772, 773, 623, 624,
	625, 1061, 285, 663, 762, 285, 765, 280, 281, 756,
	407, 253, 774, 737, 776, 777, 778, 736, 1031, 346,
	984, 985, 1044, 800, 341, 955, 775, 463, 405, 422,
	285, 285, 285, 412, 811, 472, 342, 859, 714, 285,
	767, 285, 285, 285, 1048, 1047, 932, 761, 844, 633,
	726, 470, 988, 407, 503, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 271, 675, 514, 735,
	74, 57, 676, 1020, 819, 277, 278, 734, 423, 805,
	272, 1019, 975, 588, 475, 480, 835, 322, 320, 286,
	996, 951, 488, 59, 253, 503, 502, 512, 513, 505,
	506, 507, 508, 509, 510, 511, 504, 486, 61, 514,
	54, 1, 862, 854, 599, 582, 581, 294, 594, 305,
	598, 74, 833, 779, 814, 864, 855, 822, 1004, 285,
	949, 583, 585, 606, 845, 769, 609, 941, 757, 856,
	831, 853, 595, 858, 74, 1045, 253, 867, 294, 766,
	428, 852, 429, 427, 431, 430, 426, 886, 145, 288,
	987, 991, 816, 69, 786, 713, 785, 875, 876, 635,
	522, 733, 293, 418, 747, 561, 399, 1018, 974, 74,
	832, 891, 544, 819, 74, 893, 294, 722, 294, 352,
	285, 666, 363, 894, 285, 711, 921, 904, 900, 885,
	899, 360, 812, 362, 253, 361, 813, 567, 917, 573,
	916, 74, 74, 496, 350, 937, 938, 824, 825, 826,
	903, 924, 830, 933, 935, 902, 923, 836, 344, 837,
	838, 839, 840, 919, 713, 744, 1035, 929, 939, 928,
	468, 409, 979, 977, 927, 842, 479, 847, 848, 849,
	971, 1049, 571, 710, 585, 25, 58, 710, 710, 930,
	282, 710, 745, 14, 21, 936, 15, 13, 12, 29,
	10, 9, 8, 7, 6, 710, 710, 710, 710, 5,
	4, 963, 273, 23, 973, 2, 20, 19, 18, 17,
	710, 253, 253, 583, 16, 11, 0, 0, 0, 0,
	0, 74, 0, 931, 0, 294, 0, 0, 74, 0,
	0, 998, 864, 1000, 886, 997, 898, 0, 74, 1003,
	0, 0, 294, 744, 929, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 970, 0, 0, 253, 253, 253,
	253, 0, 0, 0, 1013, 1022, 990, 1024, 253, 0,
	745, 253, 50, 285, 253, 1032, 885, 1039, 0, 940,
	74, 582, 581, 0, 1042, 715, 1040, 284, 0, 285,
	929, 929, 929, 929, 528, 529, 530, 531, 532, 533,
	0, 1052, 486, 1053, 929, 1021, 0, 1023, 0, 0,
	0, 0, 930, 930, 930, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 990, 959, 0, 0,
	0, 0, 0, 0, 0, 948, 1067, 1068, 968, 969,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 0,
	74, 74, 74, 0, 1076, 1076, 1076, 1077, 1078, 0,
	710, 0, 74, 0, 0, 254, 1085, 317, 318, 0,
	0, 0, 285, 0, 0, 0, 0, 960, 961, 0,
	962, 0, 0, 964, 0, 966, 0, 0, 0, 583,
	0, 585, 0, 1016, 1069, 1070, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 258, 0, 260,
	261, 1034, 265, 266, 267, 268, 0, 0, 0, 0,
	1041, 0, 0, 0, 285, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 673, 0, 514, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 710, 0, 0, 0, 0, 0,
	585, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 330, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 1082,
	1083, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	414, 319, 0, 0, 0, 0, 325, 326, 0, 328,
	434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 467, 469, 0, 0,
	0, 0, 0, 0, 473, 446, 476, 477, 478, 0,
	451, 452, 453, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 447, 448, 449, 450, 432, 433, 285,
	994, 435, 0, 0, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 285, 285, 285, 806,
	807, 808, 331, 0, 0, 333, 1033, 0, 0, 285,
	337, 0, 994, 0, 578, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 818, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 482, 0, 483, 654,
	484, 73, 487, 820, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 491, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 0, 113, 123,
	133, 0, 0, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 652,
	0, 0, 655, 656, 657, 0, 0, 660, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 783, 0,
	0, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 498, 92, 501, 796, 134, 135, 137, 136, 515,
	516, 517, 518, 519, 520, 521, 0, 499, 500, 497,
	503, 502, 512, 513, 505, 506, 507, 508, 509, 510,
	511, 504, 0, 0, 514, 0, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 0, 0, 0, 0, 238,
	229, 200, 240, 177, 192, 249, 193, 194, 221, 164,
	208, 106, 190, 0, 180, 159, 187, 160, 178, 202,
	86, 205, 176, 231, 211, 147, 0, 91, 0, 0,
	246, 97, 215, 0, 112, 103, 0, 841, 204, 233,
	206, 228, 199, 222, 170, 214, 241, 191, 219, 0,
	0, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 217, 236, 189, 218, 220, 158, 216, 0,
	162, 165, 248, 234, 183, 184, 0, 0, 0, 0,
	0, 784, 0, 203, 207, 225, 197, 0, 0, 887,
	0, 0, 0, 0, 0, 181, 0, 213, 0, 797,
	0, 168, 163, 201, 798, 0, 0, 149, 0, 182,
	226, 0, 0, 0, 154, 198, 127, 235, 196, 195,
	239, 242, 108, 0, 232, 179, 188, 82, 186, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 166, 125, 104, 167, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 161, 0, 113,
	123, 133, 175, 146, 128, 129, 130, 150, 151, 0,
	152, 0, 153, 148, 173, 174, 171, 172, 209, 210,
	243, 244, 245, 227, 169, 0, 0, 230, 212, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	185, 247, 224, 223, 237, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	0, 0, 888, 238, 229, 200, 240, 177, 192, 249,
	193, 194, 221, 164, 208, 106, 190, 0, 180, 159,
	187, 160, 178, 202, 86, 205, 176, 231, 211, 301,
	0, 91, 0, 0, 246, 97, 215, 0, 112, 103,
	0, 0, 204, 233, 206, 228, 199, 222, 170, 214,
	241, 191, 219, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 217, 236, 189, 218,
	220, 158, 216, 0, 162, 165, 248, 234, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 203, 207, 225,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 181,
	0, 213, 0, 0, 0, 168, 163, 201, 0, 0,
	0, 300, 0, 182, 226, 0, 0, 0, 302, 198,
	127, 235, 196, 195, 239, 242, 108, 0, 232, 179,
	188, 82, 186, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 297, 125, 104, 296,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 161, 0, 113, 123, 133, 175, 303, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 299, 173, 174,
	171, 172, 209, 210, 243, 244, 245, 227, 169, 0,
	0, 230, 212, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 185, 247, 224, 223, 237, 0,
	88, 115, 0, 0, 0, 0, 0, 291, 290, 298,
	134, 135, 137, 136, 238, 229, 200, 240, 177, 192,
	249, 193, 194, 221, 164, 208, 106, 190, 0, 180,
	159, 187, 160, 178, 202, 86, 205, 176, 231, 211,
	301, 0, 91, 0, 0, 246, 97, 215, 0, 112,
	103, 0, 0, 204, 233, 206, 228, 199, 222, 170,
	214, 241, 191, 219, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 217, 236, 189,
	218, 220, 158, 216, 0, 162, 165, 248, 234, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 203, 207,
	225, 197, 0, 0, 0, 0, 0, 0, 1012, 0,
	181, 0, 213, 0, 0, 0, 168, 163, 201, 0,
	0, 0, 300, 0, 182, 226, 0, 0, 0, 302,
	198, 127, 235, 196, 195, 239, 242, 108, 0, 232,
	179, 188, 82, 186, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 166, 125, 104,
	167, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 161, 0, 113, 123, 133, 175, 303, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 299, 173,
	174, 171, 172, 209, 210, 243, 244, 245, 227, 169,
	0, 0, 230, 212, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 0, 185, 247, 224, 223, 237,
	0, 88, 115, 0, 0, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 238, 229, 200, 240, 177,
	192, 249, 193, 194, 221, 164, 208, 106, 190, 0,
	180, 159, 187, 160, 178, 202, 86, 205, 176, 231,
	211, 301, 0, 91, 0, 0, 246, 97, 215, 0,
	112, 103, 0, 0, 204, 233, 206, 228, 199, 222,
	170, 214, 241, 191, 219, 53, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 217, 236,
	189, 218, 220, 158, 216, 0, 162, 165, 248, 234,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 203,
	207, 225, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 213, 0, 0, 0, 168, 163, 201,
	0, 0, 0, 300, 0, 182, 226, 0, 0, 0,
	302, 198, 127, 235, 196, 195, 239, 242, 108, 0,
	232, 179, 188, 82, 186, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 166, 125,
	104, 167, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 161, 0, 113, 123, 133, 175, 303,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 299,
	173, 174, 171, 172, 209, 210, 243, 244, 245, 227,
	169, 0, 0, 230, 212, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 185, 247, 224, 223,
	237, 0, 88, 115, 0, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 238, 229, 200, 240,
	177, 192, 249, 193, 194, 221, 164, 208, 106, 190,
	0, 180, 159, 187, 160, 178, 202, 86, 205, 176,
	231, 211, 301, 0, 91, 0, 0, 246, 97, 215,
	0, 112, 103, 0, 0, 204, 233, 206, 228, 199,
	222, 170, 214, 241, 191, 219, 0, 0, 0, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 217,
	236, 189, 218, 220, 158, 216, 0, 162, 165, 248,
	234, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	203, 207, 225, 197, 0, 0, 0, 0, 0, 0,
	901, 0, 181, 0, 213, 0, 0, 0, 168, 163,
	201, 0, 0, 0, 300, 0, 182, 226, 0, 0,
	0, 302, 198, 127, 235, 196, 195, 239, 242, 108,
	0, 232, 179, 188, 82, 186, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 166,
	125, 104, 167, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 161, 0, 113, 123, 133, 175,
	303, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	299, 173, 174, 171, 172, 209, 210, 243, 244, 245,
	227, 169, 0, 0, 230, 212, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 185, 247, 224,
	223, 237, 0, 88, 115, 0, 0, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 238, 229, 200,
	240, 177, 192, 249, 193, 194, 221, 164, 208, 106,
	190, 0, 180, 159, 187, 160, 178, 202, 86, 205,
	176, 231, 211, 301, 0, 91, 0, 0, 246, 97,
	215, 0, 112, 103, 0, 0, 204, 233, 206, 228,
	199, 222, 170, 214, 241, 191, 219, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	217, 236, 189, 218, 220, 158, 216, 0, 162, 165,
	248, 234, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 203, 207, 225, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 213, 0, 0, 0, 168,
	163, 201, 0, 0, 0, 300, 0, 182, 226, 0,
	0, 0, 302, 198, 127, 235, 196, 195, 239, 242,
	108, 0, 232, 179, 188, 82, 186, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	297, 125, 104, 296, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 161, 0, 113, 123, 133,
	175, 303, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 299, 173, 174, 171, 172, 209, 210, 243, 244,
	245, 227, 169, 0, 0, 230, 212, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 185, 247,
	224, 223, 237, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 298, 134, 135, 137, 136, 238, 229,
	200, 240, 177, 192, 249, 193, 194, 221, 164, 208,
	106, 190, 0, 180, 159, 187, 160, 178, 202, 86,
	205, 176, 231, 211, 301, 0, 91, 0, 0, 246,
	97, 215, 0, 112, 103, 0, 0, 204, 233, 206,
	228, 199, 222, 170, 214, 241, 191, 219, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 217, 236, 189, 218, 220, 158, 216, 0, 162,
	165, 248, 234, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 203, 207, 225, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 213, 0, 0, 0,
	168, 163, 201, 0, 0, 0, 300, 0, 182, 226,
	0, 0, 0, 302, 198, 127, 235, 196, 195, 239,
	242, 108, 0, 232, 179, 188, 82, 186, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 166, 125, 104, 167, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 161, 0, 113, 123,
	133, 175, 303, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 299, 173, 174, 171, 172, 209, 210, 243,
	244, 245, 227, 169, 0, 0, 230, 212, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 185,
	247, 224, 223, 237, 0, 88, 115, 0, 0, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 238,
	229, 200, 240, 177, 192, 249, 193, 194, 221, 164,
	208, 106, 190, 0, 180, 159, 187, 160, 178, 202,
	86, 205, 176, 231, 211, 301, 0, 91, 0, 0,
	246, 97, 215, 0, 112, 103, 0, 0, 204, 233,
	206, 228, 199, 222, 170, 214, 241, 191, 219, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 217, 236, 189, 218, 220, 158, 216, 0,
	162, 165, 248, 234, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 203, 207, 225, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 213, 0, 0,
	0, 168, 163, 201, 0, 0, 0, 300, 0, 182,
	226, 0, 0, 0, 302, 198, 127, 235, 196, 195,
	239, 242, 108, 0, 232, 179, 188, 82, 186, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 166, 125, 104, 167, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 161, 0, 113,
	123, 133, 175, 303, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 299, 173, 174, 171, 172, 209, 210,
	243, 244, 245, 227, 169, 0, 0, 230, 212, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	185, 247, 224, 223, 237, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	238, 229, 200, 240, 177, 192, 249, 193, 194, 221,
	164, 208, 106, 190, 0, 180, 159, 187, 160, 178,
	202, 86, 205, 176, 231, 211, 301, 0, 91, 0,
	0, 246, 97, 215, 0, 112, 103, 0, 0, 204,
	233, 206, 228, 199, 222, 170, 214, 241, 191, 219,
	0, 0, 0, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 217, 236, 189, 218, 220, 158, 216,
	0, 162, 165, 248, 234, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 203, 207, 225, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 213, 0,
	0, 0, 168, 163, 201, 0, 0, 0, 300, 0,
	182, 226, 0, 0, 0, 302, 198, 127, 235, 196,
	195, 239, 242, 108, 0, 232, 179, 188, 82, 186,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 166, 125, 104, 167, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 161, 0,
	113, 123, 133, 175, 303, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 299, 173, 174, 171, 172, 209,
	210, 243, 244, 245, 227, 169, 0, 0, 230, 212,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	0, 185, 247, 224, 223, 237, 0, 88, 115, 0,
	0, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 106, 0, 0, 705, 0, 348, 0, 0, 0,
	86, 0, 347, 0, 0, 0, 0, 91, 0, 0,
	384, 97, 0, 0, 112, 103, 0, 0, 0, 0,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 397, 365, 364, 366, 367, 368, 369, 0,
	0, 81, 370, 371, 372, 0, 0, 0, 345, 358,
	0, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 356, 708, 0, 0, 0, 395, 0, 357,
	0, 0, 354, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 393,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 385, 394, 391, 392, 389, 390,
	388, 387, 386, 396, 379, 380, 382, 0, 381, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 106, 134, 135, 137, 136,
	348, 0, 0, 0, 86, 0, 347, 0, 0, 0,
	0, 91, 0, 0, 384, 97, 0, 0, 112, 103,
	0, 0, 0, 0, 377, 378, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 397, 365, 364, 366,
	367, 368, 369, 0, 0, 81, 370, 371, 372, 0,
	0, 0, 345, 358, 0, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 355, 356, 708, 0, 0,
	0, 395, 0, 357, 0, 0, 354, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 393, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 385, 394,
	391, 392, 389, 390, 388, 387, 386, 396, 379, 380,
	382, 0, 381, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 0, 106,
	134, 135, 137, 136, 348, 0, 0, 0, 86, 0,
	347, 0, 0, 0, 0, 91, 0, 0, 384, 97,
	0, 0, 112, 103, 0, 0, 0, 0, 377, 378,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 339,
	397, 365, 364, 366, 367, 368, 369, 0, 0, 81,
	370, 371, 372, 0, 0, 0, 345, 358, 0, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	356, 0, 0, 0, 0, 395, 0, 357, 0, 0,
	354, 359, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 393, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 385, 394, 391, 392, 389, 390, 388, 387,
	386, 396, 379, 380, 382, 0, 381, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 24, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 106, 134, 135, 137, 136, 348, 0,
	0, 0, 86, 0, 347, 0, 0, 0, 0, 91,
	0, 0, 384, 97, 0, 0, 112, 103, 0, 0,
	0, 0, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 397, 365, 364, 366, 367, 368,
	369, 0, 0, 81, 370, 371, 372, 0, 0, 0,
	345, 358, 0, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 356, 0, 0, 0, 0, 395,
	0, 357, 0, 0, 354, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 393, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 385, 394, 391, 392,
	389, 390, 388, 387, 386, 396, 379, 380, 382, 0,
	381, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 115,
	0, 0, 0, 0, 0, 92, 0, 106, 134, 135,
	137, 136, 348, 0, 0, 0, 86, 0, 347, 0,
	0, 0, 0, 91, 0, 0, 384, 97, 0, 0,
	112, 103, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 397, 365,
	364, 366, 367, 368, 369, 0, 0, 81, 370, 371,
	372, 0, 0, 0, 345, 358, 0, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 356, 0,
	0, 0, 0, 395, 0, 357, 0, 0, 354, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 393, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	385, 394, 391, 392, 389, 390, 388, 387, 386, 396,
	379, 380, 382, 0, 381, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 88, 115, 0, 0, 0, 0, 0, 92,
	86, 0, 134, 135, 137, 136, 0, 91, 0, 0,
	384, 97, 0, 0, 112, 103, 0, 0, 0, 0,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 397, 365, 364, 366, 367, 368, 369, 0,
	0, 81, 370, 371, 372, 0, 0, 0, 0, 358,
	0, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 356, 0, 0, 0, 0, 395, 0, 357,
	0, 0, 354, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 393,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 385, 394, 391, 392, 389, 390,
	388, 387, 386, 396, 379, 380, 382, 0, 381, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 88, 115, 0, 0,
	0, 0, 0, 92, 86, 0, 134, 135, 137, 136,
	0, 91, 0, 0, 0, 97, 0, 0, 112, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 503, 502, 512, 513, 505, 506, 507, 508, 509,
	510, 511, 504, 0, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 106, 113, 123, 133, 0, 0, 128, 129,
	130, 86, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 97, 0, 0, 112, 103, 0, 0, 0,
	0, 0, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	88, 115, 81, 0, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 127, 0, 0,
	0, 71, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	75, 0, 96, 131, 109, 89, 124, 0, 86, 0,
	0, 0, 0, 0, 0, 91, 0, 88, 115, 97,
	0, 0, 112, 103, 92, 0, 0, 134, 135, 137,
	136, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 106, 113, 123, 133,
	993, 0, 128, 129, 130, 86, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 97, 0, 0, 112,
	103, 0, 0, 0, 0, 0, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 252, 0, 995,
	0, 0, 0, 0, 88, 115, 81, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 82, 0, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 0, 125, 104,
	0, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 0, 0, 113, 123, 133, 0, 0, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 75, 0, 96, 131, 109, 89,
	124, 0, 86, 0, 0, 0, 0, 0, 0, 91,
	0, 88, 115, 97, 0, 0, 112, 103, 92, 0,
	0, 134, 135, 137, 136, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	106, 113, 123, 133, 0, 0, 128, 129, 130, 86,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 0,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 73, 0, 0, 569, 0, 0, 570, 88, 115,
	81, 0, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 106, 113, 123,
	133, 0, 0, 128, 129, 130, 86, 0, 421, 0,
	0, 0, 0, 91, 0, 0, 0, 97, 0, 0,
	112, 103, 0, 0, 0, 0, 0, 0, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 73, 0,
	420, 0, 0, 0, 0, 88, 115, 81, 0, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 106, 113, 123, 133, 0, 0,
	128, 129, 130, 86, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 97, 0, 0, 112, 103, 0,
	0, 0, 0, 0, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 252, 0, 995, 0, 0,
	0, 0, 88, 115, 81, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	82, 0, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 0, 125, 104, 0, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	0, 106, 113, 123, 133, 0, 0, 128, 129, 130,
	86, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 97, 0, 0, 112, 103, 0, 0, 0, 0,
	0, 0, 75, 0, 96, 131, 109, 89, 124, 53,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 88,
	115, 81, 0, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 106, 113,
	123, 133, 0, 0, 128, 129, 130, 86, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 97, 0,
	0, 112, 103, 0, 0, 0, 0, 0, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 73,
	0, 820, 0, 0, 0, 0, 88, 115, 81, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 106,
	0, 128, 129, 130, 0, 0, 0, 410, 86, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 97,
	0, 0, 112, 103, 0, 0, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 88, 115, 0, 0, 0, 0, 81,
	92, 0, 0, 134, 135, 137, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 106, 113, 123, 133,
	0, 0, 128, 129, 130, 86, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 97, 0, 0, 112,
	103, 0, 0, 0, 0, 0, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 88, 115, 81, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 82, 0, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 0, 125, 104,
	0, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 0, 106, 113, 123, 133, 0, 0, 128,
	129, 130, 86, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 97, 0, 0, 112, 103, 0, 0,
	0, 0, 0, 0, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 88, 115, 81, 0, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	106, 113, 123, 133, 0, 0, 128, 129, 130, 86,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 0,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 88, 115,
	81, 0, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 0, 113, 123,
	133, 0, 0, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136,
}
var yyPact = [...]int{

	127, -1000, -173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 697, 728, -1000, -1000, -1000, -1000, -1000, 532,
	5125, 28, -3, 55, 51, 1634, 46, 7073, -1000, -1000,
	15, -1000, -164, -1000, -1000, -174, -1000, -1000, -1000, -1000,
	530, -1000, -1000, -1000, -1000, -1000, 690, 705, 566, 696,
	605, -1000, 28, 7073, 719, 1868, -140, 347, 25, 41,
	25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43, -1000,
	18, 466, 18, 7073, 7073, -1000, 718, -59, 717, -15,
	-1000, -1000, -66, -1000, -75, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7073, -1000, -1000, -1000, -1000, -1000, -1000, 296, -1000, -1000,
	-1000, -1000, 514, 514, -1000, -1000, -1000, -1000, -1000, 343,
	646, 4560, 4560, 697, -1000, 530, -1000, -1000, -1000, 630,
	-1000, -1000, 217, 6602, 644, 103, 7073, 492, 2792, -1000,
	-1000, -1000, 154, 5970, -1000, -1000, -1000, 640, -1000, -1000,
	-1000, -1000, -1000, -1000, 703, 450, -1000, 1132, 7073, 186,
	417, 7073, 7073, 7073, 669, 553, 7073, -1000, -1000, -1000,
	7073, 714, 7073, 7073, 7073, -1000, -1000, 715, -1000, 714,
	-1000, -1000, -1000, -1000, -1000, 4560, -1000, -1000, -1000, -1000,
	-1000, 724, 129, 260, -1000, 4560, 1517, 514, 514, -1000,
	-1000, 95, -1000, -1000, 4764, 4764, 4764, 4764, 4764, 4764,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 514, 101, -1000, 4346, 514, 514, 514,
	514, 514, 514, 4560, 514, 514, 514, 514, 514, 514,
	514, 514, 514, 514, 514, 514, 514, -1000, -1000, 505,
	-1000, 199, 690, 343, 605, 5813, 569, -1000, -1000, 468,
	7073, -1000, 6916, 3485, 712, 2792, 492, 4560, 108, -1000,
	-1000, -1000, -1000, -143, -153, 122, 262, -53, -1000, -1000,
	521, -1000, 521, 521, 521, 521, -29, -29, -29, -29,
	-1000, -1000, -1000, -1000, -1000, 541, -1000, 521, 521, 521,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 539, 539,
	539, 531, 531, -1000, 667, 552, -1000, 54, 490, -1000,
	-1000, 7073, -1000, -1000, 712, 7073, -1000, -1000, -1000, 690,
	-72, -1000, -1000, -1000, -1000, 443, 160, -1000, -1000, 603,
	4560, 4560, 270, 4560, 4560, 136, 4764, 255, 177, 4764,
	4764, 4764, 4764, 4764, 4764, 4764, 4764, 4764, 4764, 4764,
	4764, 4764, 4764, 4764, 315, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 413, -1000, 530, 426, 426, 113, 113,
	113, 113, 113, 4968, 3704, 3254, 343, 4346, 3918, 3918,
	4560, 4560, 3918, 673, 178, 160, 6759, -1000, 343, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3918, 3918, 3918, 3918,
	4560, -1000, -1000, -1000, 646, -1000, 673, 699, -1000, 621,
	617, 3918, -1000, 548, 6916, 514, -1000, 5656, -1000, 519,
	-1000, 153, -1000, 93, -1000, -1000, -1000, 697, 4560, -1000,
	160, -1000, 401, 514, -1000, -48, 152, -1000, -1000, 534,
	660, 134, 398, 131, -1000, -1000, 652, -1000, 193, -55,
	-1000, -1000, 295, -29, -29, -1000, -1000, 108, 637, 108,
	108, 108, 321, -1000, -1000, -1000, -1000, 285, -1000, -1000,
	-1000, 266, -1000, -1000, 7073, -1000, 157, 149, 30, 11,
	10, 8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7073, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 319,
	-1000, 4560, -1000, 593, 136, 156, -1000, -1000, 227, -1000,
	-1000, 160, 160, 642, -1000, -1000, -1000, -1000, 255, 4764,
	4764, 4764, 267, 642, 601, 204, 1051, 113, 287, 287,
	110, 110, 110, 110, 110, 98, 98, -1000, -1000, -1000,
	343, -1000, -1000, -1000, 343, 3918, 488, -1000, -1000, 1363,
	83, 514, 81, -1000, -1000, 343, 369, 369, 92, 320,
	369, 3918, 201, -1000, 4560, 343, -1000, 369, 343, 369,
	369, -1000, -1000, 7073, -1000, -1000, -1000, -1000, 527, -1000,
	662, 473, 477, -1000, -1000, 4132, 343, 412, 76, 697,
	6916, 4560, 3254, 690, 160, -1000, 395, 649, 148, 381,
	6759, -1000, 365, -1000, -1000, 363, 546, 48, -1000, -1000,
	-1000, 444, 108, 108, -1000, 158, -1000, -1000, -1000, 407,
	-1000, 485, 374, 2330, -1000, 7073, -1000, -1000, -1000, -1000,
	-1000, 357, -31, 532, 354, 347, -1000, -1000, -1000, -1000,
	160, -1000, -1000, -1000, -1000, -1000, 267, 642, 418, -1000,
	4764, 4764, -1000, -1000, 369, 3918, -1000, -1000, 6441, -1000,
	-1000, 2561, 3918, 3023, -1000, -1000, -1000, 34, 315, 34,
	-118, 494, 166, -1000, 4560, 256, -1000, -1000, -1000, -1000,
	-1000, -1000, 712, 6284, 659, -1000, 514, -1000, -1000, 522,
	6759, 6759, 690, -1000, 160, -1000, -1000, 343, -156, -35,
	261, -1000, 351, -1000, 521, -1000, -1000, -49, 723, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	317, 225, -1000, 224, -1000, -1000, -1000, -1000, -1000, -1000,
	636, -1000, -1000, -1000, -1000, 4764, 642, 642, -1000, -1000,
	-1000, -1000, 67, 343, -1000, 343, 521, 521, -1000, 521,
	531, -1000, 521, -12, 521, -13, 343, 343, 514, -114,
	-1000, 160, 4560, 710, 479, 520, -1000, -1000, -1000, 671,
	5312, 5469, 722, -1000, 514, -1000, 530, 64, -1000, -1000,
	2330, -1000, -1000, -1000, 144, -1000, -128, 6759, -1000, 111,
	-1000, -79, -1000, 427, 370, 344, 642, 2099, -1000, -1000,
	-1000, 70, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4764, 343, 316, 160, 708, 698, 6284, 6284, 6284, 6284,
	-1000, 578, 576, -1000, 567, 564, 614, 7073, -1000, 342,
	5312, 94, -1000, 6127, -1000, -1000, 6916, 477, 343, 6759,
	-1000, 339, 628, -1000, 203, 658, -1000, 657, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 0, -1000, -1000, -1000, 4560,
	4560, 520, 545, 509, -1000, -1000, -1000, -1000, 575, -1000,
	568, -1000, -1000, -1000, -1000, -1000, 39, 36, 33, -1000,
	476, -1000, -1000, -1000, 606, -1000, 312, -1000, -1000, 343,
	40, -131, 160, 414, 4560, 4560, -1000, -1000, 514, 514,
	514, -1000, -1000, -1000, 591, -126, -135, 160, 160, 6759,
	6759, 6759, -1000, 587, -1000, 327, -1000, 327, 327, -129,
	-1000, 6759, -1000, -1000, -132, -1000, -136, -1000,
}
var yyPgo = [...]int{

	0, 935, 934, 929, 928, 927, 926, 925, 14, 395,
	923, 922, 920, 919, 914, 913, 912, 911, 910, 909,
	908, 907, 906, 904, 903, 57, 900, 896, 895, 47,
	892, 53, 891, 890, 886, 26, 58, 37, 24, 1,
	885, 17, 48, 7, 884, 883, 8, 882, 943, 881,
	50, 880, 879, 876, 6, 23, 868, 854, 853, 849,
	46, 659, 847, 845, 843, 841, 832, 831, 40, 2,
	20, 28, 16, 829, 33, 5, 827, 39, 822, 820,
	818, 817, 41, 816, 44, 815, 25, 45, 814, 32,
	9, 30, 54, 51, 813, 812, 811, 350, 810, 132,
	282, 809, 806, 804, 803, 52, 0, 4, 13, 19,
	802, 358, 43, 3, 801, 800, 1085, 12, 21, 799,
	18, 798, 796, 795, 794, 793, 792, 790, 190, 789,
	787, 785, 22, 34, 783, 782, 778, 777, 776, 775,
	49, 10, 773, 770, 768, 763, 29, 760, 42, 27,
	759, 758, 754, 11, 752, 751, 750, 55, 141, 748,
	90,
}
var yyR1 = [...]int{

	0, 155, 156, 156, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 119,
	119, 16, 16, 16, 16, 19, 149, 151, 135, 135,
	134, 134, 136, 136, 137, 137, 137, 150, 150, 150,
	146, 122, 122, 122, 125, 125, 123, 123, 123, 123,
	123, 123, 123, 124, 124, 124, 124, 124, 126, 126,
	126, 126, 126, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 145, 145, 128,
	128, 140, 140, 141, 141, 141, 138, 138, 139, 139,
	142, 142, 142, 129, 129, 129, 129, 129, 129, 130,
	130, 143, 143, 132, 132, 132, 133, 133, 144, 144,
	144, 144, 144, 131, 131, 147, 147, 152, 152, 152,
	152, 152, 148, 148, 154, 154, 153, 17, 17, 17,
	17, 17, 17, 17, 17, 18, 18, 18, 51, 51,
	1, 20, 2, 3, 4, 4, 5, 5, 5, 5,
	6, 6, 6, 121, 121, 121, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 34, 34, 50,
	50, 24, 22, 23, 23, 23, 23, 159, 25, 26,
	26, 27, 27, 27, 31, 31, 31, 29, 29, 30,
	30, 37, 37, 36, 36, 38, 38, 38, 38, 110,
	110, 110, 109, 109, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 52, 44, 44, 44, 44, 115, 115,
	114, 114, 114, 113, 113, 45, 45, 45, 45, 46,
	46, 46, 46, 47, 47, 49, 49, 48, 48, 53,
	53, 53, 53, 54, 54, 55, 55, 39, 39, 39,
	39, 39, 39, 39, 98, 98, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 35, 35, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 160,
	160, 66, 66, 66, 66, 32, 32, 32, 32, 32,
	118, 118, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 78, 78, 33, 33, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 89, 89, 70, 70,
	72, 72, 71, 73, 90, 90, 91, 92, 92, 93,
	93, 95, 95, 95, 94, 94, 94, 96, 96, 99,
	99, 100, 100, 97, 97, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 102, 102, 102, 103, 103,
	104, 104, 104, 107, 107, 108, 108, 111, 111, 112,
	112, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 157, 158, 116, 117, 117, 117,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 2, 9, 4, 7, 4, 4, 4, 0, 3,
	0, 4, 0, 3, 0, 1, 1, 1, 3, 3,
	8, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 4, 7, 2, 3, 2,
	2, 3, 1, 1, 1, 3, 2, 6, 7, 7,
	7, 9, 7, 7, 7, 4, 5, 4, 1, 3,
	3, 3, 2, 2, 3, 4, 2, 3, 2, 2,
	4, 4, 3, 1, 1, 1, 3, 5, 6, 5,
	5, 5, 3, 3, 6, 3, 5, 0, 3, 0,
	2, 4, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -155, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 29, -19,
	113, 114, 115, 137, 117, 130, 32, 52, 215, 132,
	221, 224, 225, 228, 227, 232, 24, 131, 135, 136,
	-157, 7, 199, 55, -156, 236, -82, 14, -27, 5,
	-25, -159, -25, -25, -25, -25, -149, 55, 191, -104,
	120, 126, -107, 58, -106, 205, 144, 138, 166, 157,
	155, 67, 133, 153, 149, 147, 26, 171, 222, 210,
	148, 33, 229, 142, 143, 170, 207, 37, 169, 165,
	168, 141, 164, 41, 160, 150, 17, 136, 128, 209,
	146, 135, 40, 175, 140, 223, 162, 151, 152, 167,
	139, 163, 137, 176, 211, 159, 156, 122, 180, 181,
	182, 208, 154, 177, 232, 233, 235, 234, -97, 124,
	120, 121, 191, 120, 120, -121, 179, 31, 189, 113,
	183, 184, 186, 188, 120, 58, -105, -106, 73, 21,
	23, 173, 76, 108, 15, 77, 158, 161, 107, 200,
	50, 192, 193, 190, 191, 178, 28, 9, 24, 131,
	20, 101, 115, 80, 81, 216, 134, 22, 132, 70,
	18, 53, 10, 12, 13, 125, 124, 92, 121, 48,
	7, 109, 25, 89, 44, 27, 46, 90, 16, 194,
	195, 30, 204, 103, 51, 38, 74, 68, 71, 54,
	72, 14, 49, 219, 218, 91, 116, 199, 47, 6,
	203, 29, 130, 45, 79, 123, 69, 220, 5, 126,
	8, 52, 127, 196, 197, 198, 36, 217, 78, 11,
	120, -111, 58, -106, -116, -116, 61, 209, -116, 226,
	-116, -116, 233, 235, 234, -116, -116, -116, -116, -8,
	-86, 16, 15, -11, -9, -157, 6, 19, 20, -31,
	42, 43, -26, -97, -48, -111, 10, -92, -119, -93,
	230, 229, -108, -95, -107, -105, 161, 158, 231, 189,
	113, 31, 120, 179, 212, -150, -146, 58, -100, 125,
	121, -100, 120, -99, 125, 58, -99, -48, -48, -116,
	10, 179, 10, 120, 191, -116, -116, 185, -116, 188,
	-48, -116, 61, -116, -71, -157, -71, -116, -158, 57,
	-87, 18, 30, -39, -56, 74, -61, 28, 22, -60,
	-57, -75, -73, -74, 108, 97, 98, 105, 75, 109,
	-65, -63, -64, -66, 60, 59, 61, 62, 63, 64,
	68, 69, 70, -107, -111, -71, -157, 46, 47, 200,
	201, 204, 202, 77, 36, 190, 198, 197, 196, 194,
	195, 192, 193, 125, 191, 103, 199, 58, -106, -83,
	-84, -39, -82, -8, -25, 38, -29, 20, 66, -49,
	25, -48, 29, 110, -48, 56, -92, 82, -94, -107,
	60, 28, 29, 15, 57, 56, -122, -125, -127, -126,
	-123, -124, 155, 156, 108, 159, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 133, 151, 152, 153,
	154, 138, 139, 140, 141, 142, 143, 144, 146, 147,
	148, 149, 150, -111, 74, 58, -48, -48, -51, -48,
	22, 54, -111, -48, -50, 10, -48, -48, -48, -34,
	10, -50, -116, -116, -116, -69, -39, -116, 8, 92,
	73, 72, 89, 56, 17, -39, -58, 92, 74, 90,
	91, 76, 94, 93, 104, 97, 98, 99, 100, 101,
	102, 103, 95, 96, 107, 82, 83, 84, 85, 86,
	87, 88, -98, -157, -74, -157, 111, 112, -61, -61,
	-61, -61, -61, -61, -157, 110, -8, -157, -157, -157,
	-157, -157, -157, -157, -78, -39, -157, -160, -157, -160,
	-160, -160, -160, -160, -160, -160, -157, -157, -157, -157,
	56, -85, 23, 24, -86, -158, -31, -62, -107, 61,
	64, -30, 45, -59, 29, 36, -8, -157, -48, -90,
	-91, -75, -107, -111, -112, -111, -105, -55, 11, -93,
	-39, -133, 107, 214, -151, -135, 222, -146, -147, -152,
	128, 126, -148, 33, 121, 27, -142, 68, 74, -138,
	176, -128, 55, -128, -128, -128, -128, -132, 158, -132,
	-132, -132, 55, -128, -128, -128, -140, 55, -140, -140,
	-141, 55, -141, 22, 54, -101, 116, 222, 200, 118,
	115, 119, 114, 173, 158, 67, 28, 14, 211, 58,
	56, -48, -116, -55, -48, -116, -116, -116, -86, 187,
	-116, 56, -158, 40, -39, -39, -67, 68, 74, 69,
	70, -39, -39, -61, -68, -71, -74, 65, 92, 90,
	91, 76, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -118, 58, 60,
	58, -60, -60, -107, -37, 20, -36, -38, 99, -39,
	-111, -108, -112, -105, -158, -8, -36, -36, -39, -39,
	-36, -29, -76, -77, 78, -107, -158, -36, -37, -36,
	-36, -84, -87, -96, 18, 10, 36, 36, -36, -89,
	54, -90, -70, -72, -71, -157, -8, -88, -107, -55,
	56, 82, 110, -82, -39, 58, -157, -136, 173, 82,
	55, 27, -148, 58, 58, -148, -129, 28, 68, -139,
	177, 61, -132, -132, -133, 29, -133, -133, -133, -145,
	60, 61, 61, -48, -116, -102, -103, 123, 21, 121,
	27, 82, 123, 129, 129, 129, -48, -116, -116, 60,
	-39, 41, 68, 69, 70, -68, -61, -61, -61, -35,
	134, 73, -158, -158, -36, 56, -110, -109, 21, -107,
	60, 110, -157, 110, -158, -158, -158, 56, 127, 21,
	-158, -36, -79, -77, 80, -39, -158, -158, -158, -158,
	-158, -48, -40, 10, 26, -89, 56, -158, -158, -158,
	56, 110, -82, -91, -39, -108, -86, 58, -134, 28,
	82, 58, -154, -153, -107, 58, 58, -130, 54, 60,
	61, 62, 68, 190, 57, -133, -133, 58, 108, 57,
	56, 56, 57, 56, -117, -157, -108, -48, -116, 58,
	158, -149, 58, -146, -35, 73, -61, -61, -158, -38,
	-109, 99, -112, -37, -108, -120, 108, 155, 133, 153,
	149, 170, 160, 175, 151, 176, -118, -120, 205, -82,
	81, -39, 79, -55, -41, -42, -43, -44, -52, -74,
	-157, -48, 27, -72, 36, -8, -157, -107, -107, -86,
	-158, -137, 229, 223, 161, 61, 57, 56, -128, -143,
	173, 8, 60, 61, 61, 29, -61, 110, -158, -158,
	-128, -128, -128, -141, -128, 143, -128, 143, -158, -158,
	-157, -33, 203, -39, -80, 12, 56, -45, -46, -47,
	44, 48, 50, 45, 46, 47, 51, -115, 21, -41,
	-157, -114, -113, 21, -111, 60, 8, -70, -8, 110,
	-117, 82, 208, -153, -144, 128, 27, 126, 190, 57,
	57, 58, 99, -132, 58, -61, -158, 60, -81, 13,
	15, -42, -43, -42, -43, 44, 44, 44, 49, 44,
	49, 44, -46, -111, -158, -53, 52, 124, 53, -113,
	-90, -158, -107, 58, 34, -131, 67, 27, 27, -32,
	92, 208, -39, -69, 54, 54, 44, 44, 121, 121,
	121, 35, 60, -158, 206, 51, 209, -39, -39, -157,
	-157, -157, 41, 207, 210, -54, -107, -54, -54, 41,
	-158, 56, -158, -158, 208, -107, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 411, 0, 197, 197, 197, 197, 197, 0,
	480, 463, 0, 0, 0, 0, 0, 0, 653, 653,
	0, 653, 0, 653, 653, 0, 653, 653, 653, 653,
	0, 33, 34, 651, 1, 3, 419, 0, 0, 201,
	204, 199, 463, 0, 0, 0, 41, 0, 461, 0,
	461, 481, 482, 483, 484, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 0, 464,
	459, 0, 459, 0, 0, 653, 571, 528, 502, 504,
	653, 653, 0, 653, 570, 173, 174, 175, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 503,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	0, 192, 487, 488, 162, 163, 653, 0, 166, 653,
	168, 169, 0, 0, 653, 193, 194, 195, 196, 27,
	423, 0, 0, 411, 29, 0, 197, 202, 203, 207,
	205, 206, 198, 0, 0, 257, 0, 37, 0, 447,
	39, -2, 0, 0, 485, 486, -2, 499, 453, 502,
	504, 528, 570, 571, 0, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 161, 176,
	0, 189, 0, 0, 0, 182, 183, 187, 185, 189,
	653, 164, 653, 167, 653, 0, 653, 172, 28, 652,
	23, 0, 0, 420, 267, 0, 272, 274, 0, 309,
	310, 311, 312, 313, 0, 0, 0, 0, 0, 0,
	335, 336, 337, 338, 397, 398, 399, 400, 401, 402,
	403, 276, 277, 394, 0, 443, 0, 0, 0, 0,
	0, 0, 0, 385, 0, 359, 359, 359, 359, 359,
	359, 359, 359, 0, 0, 0, 0, -2, -2, 412,
	413, 416, 419, 27, 204, 0, 209, 208, 200, 0,
	0, 256, 0, 0, 265, 0, 38, 0, 126, 454,
	455, 456, 452, 0, 48, 0, 110, 106, 62, 63,
	99, 65, 99, 99, 99, 99, 123, 123, 123, 123,
	91, 92, 93, 94, 95, 0, 78, 99, 99, 99,
	82, 66, 67, 68, 69, 70, 71, 72, 101, 101,
	101, 103, 103, 43, 0, 0, 45, 0, 155, 158,
	460, 0, 157, 653, 265, 0, 653, 653, 653, 419,
	0, 653, 191, 165, 170, 0, 307, 171, 424, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	299, 300, 273, 0, 287, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 211, 0, 27, 0, 0, 0,
	0, 0, 0, 207, 0, 386, 0, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 0, 211, 0, 0,
	0, 415, 417, 418, 423, 30, 207, 0, 404, 0,
	0, 0, 210, 436, 0, 0, -2, 0, 255, 265,
	444, 0, 394, 0, 258, 489, 490, 411, 0, 448,
	449, 450, 0, 0, 46, 52, 0, 58, 59, 0,
	0, 0, 0, 0, 142, 143, 113, 111, 0, 108,
	107, 64, 0, 123, 123, 85, 86, 126, 0, 126,
	126, 126, 0, 79, 80, 81, 73, 0, 74, 75,
	76, 0, 77, 462, 0, 653, 475, 0, 472, 0,
	470, 0, 465, 466, 467, 468, 469, 471, 473, 474,
	0, 156, 177, 653, 190, 179, 180, 181, 653, 0,
	186, 0, 442, 0, 268, 269, 271, 288, 0, 290,
	292, 421, 422, 278, 279, 303, 304, 305, 0, 0,
	0, 0, 301, 283, 0, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 328, 370, 371,
	0, 326, 327, 334, 0, 0, 212, 213, 215, 219,
	0, 395, 0, -2, 306, 27, 0, 0, 0, 0,
	0, 0, 392, 389, 0, 0, 360, 0, 0, 0,
	0, 414, 24, 0, 457, 458, 405, 406, 224, 31,
	0, 436, 426, 438, 440, 0, 27, 0, 432, 411,
	0, 0, 0, 419, 266, 127, 0, 50, 0, 0,
	0, 137, 0, 139, 140, 0, 119, 0, 112, 61,
	109, 0, 126, 126, 87, 0, 88, 89, 90, 0,
	97, 0, 0, 654, 147, 0, 653, 476, 477, 478,
	479, 0, 0, 0, 0, 0, 159, 178, 184, 188,
	308, 425, 289, 291, 293, 280, 301, 284, 0, 281,
	0, 0, 275, 339, 0, 0, 216, 220, 0, 222,
	223, 0, 211, 0, -2, 342, 343, 0, 0, 0,
	0, 411, 0, 390, 0, 0, 350, 361, 362, 363,
	364, 25, 265, 0, 0, 32, 0, 441, -2, 0,
	0, 0, 419, 445, 446, 395, 36, 0, 54, 0,
	0, 49, 0, 144, 99, 138, 141, 121, 0, 114,
	115, 116, 117, 118, 100, 83, 84, 124, 125, 96,
	0, 0, 104, 0, 44, 655, 656, 148, 149, 150,
	0, 152, 153, 154, 282, 0, 302, 285, 340, 214,
	221, 217, 0, 0, 396, 0, 99, 99, 375, 99,
	103, 378, 99, 380, 99, 383, 0, 0, 0, 387,
	349, 393, 0, 407, 225, 226, 228, 229, 230, 238,
	0, 240, 0, 439, 0, -2, 0, 434, 433, 35,
	654, 47, 55, 56, 0, 53, 135, 0, 146, 128,
	122, 0, 98, 0, 0, 0, 286, 0, 341, 344,
	372, 123, 376, 377, 379, 381, 382, 384, 346, 345,
	0, 0, 0, 391, 409, 0, 0, 0, 0, 0,
	245, 0, 0, 248, 0, 0, 0, 0, 239, 0,
	0, 259, 241, 0, 243, 244, 0, 429, 27, 0,
	42, 0, 0, 145, 133, 0, 130, 132, 120, 102,
	105, 151, 218, 373, 374, 365, 348, 388, 26, 0,
	0, 227, 234, 0, 237, 246, 247, 249, 0, 251,
	0, 253, 254, 231, 232, 233, 0, 0, 0, 242,
	437, -2, 435, 51, 0, 60, 0, 129, 131, 0,
	0, 0, 410, 408, 0, 0, 250, 252, 0, 0,
	0, 136, 134, 347, 0, 0, 0, 235, 236, 0,
	0, 0, 366, 0, 369, 0, 263, 0, 0, 367,
	260, 0, 261, 262, 0, 264, 0, 368,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	55, 57, 99, 97, 56, 98, 110, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 236,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:280
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:285
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:286
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:290
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:314
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:322
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:326
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:353
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:360
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:371
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:383
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:387
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:399
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:405
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:426
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:432
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:440
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:448
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:466
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:473
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:480
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:484
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:489
		{
			yyVAL.str = ""
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:493
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:498
		{
			yyVAL.str = ""
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:502
		{
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:506
		{
			yyVAL.str = NormalTableType
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:510
		{
			yyVAL.str = GlobalTableType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:514
		{
			yyVAL.str = SingleTableType
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:526
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:530
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:536
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:547
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:562
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:715
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:720
		{
			yyVAL.optVal = nil
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:724
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:733
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:741
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:745
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:751
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:768
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:772
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:778
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:791
		{
			yyVAL.optVal = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:795
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:799
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:803
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:807
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:820
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:834
		{
			yyVAL.str = ""
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:838
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:842
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:847
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:856
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:860
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:887
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:891
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:901
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:905
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:913
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:940
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:950
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:955
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:960
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:968
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:972
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:976
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:983
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:991
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:996
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &Xa{}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.statement = &Explain{}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Radon{Action: ListAttachStr}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1086
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.tableName = TableName{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &OtherRead{}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &OtherRead{}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1194
		{
			setAllowComments(yylex, true)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.bytes2 = nil
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = UnionStr
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = UnionAllStr
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = UnionDistinctStr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.str = SQLCacheStr
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.str = DistinctStr
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.str = StraightJoinHint
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.selectExprs = nil
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.empty = struct{}{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.empty = struct{}{}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.str = JoinStr
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.str = JoinStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.str = JoinStr
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.str = StraightJoinStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.str = LeftJoinStr
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.str = LeftJoinStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = RightJoinStr
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = RightJoinStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.str = NaturalJoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.indexHints = nil
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.str = IsNullStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = IsNotNullStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.str = IsTrueStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.str = IsNotTrueStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.str = IsFalseStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = IsNotFalseStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.str = EqualStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.str = LessThanStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = GreaterThanStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.str = LessEqualStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = GreaterEqualStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.str = NotEqualStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 345:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 347:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.str = BooleanModeStr
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = QueryExpansionStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = nil
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = string("")
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &NullVal{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.exprs = nil
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.orderBy = nil
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.str = AscScr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.str = AscScr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.str = DescScr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.limit = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.str = ForUpdateStr
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.str = ShareModeStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2253
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2266
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.updateExprs = nil
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.bytes = []byte("charset")
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.expr = &Default{}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.byt = 0
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.byt = 1
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.byt = 0
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.byt = 1
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.str = IgnoreStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2679
		{
			decNesting(yylex)
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2684
		{
			forceEOF(yylex)
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2689
		{
			forceEOF(yylex)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2693
		{
			forceEOF(yylex)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2697
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
